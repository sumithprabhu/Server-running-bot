"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.axiosDelete = exports.axiosPut = exports.axiosPost = exports.axiosGet = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const packageJson = require('../../../../restapi/package.json');
const version = packageJson.version;
const addSdkVersionHeader = (config) => {
    const headers = Object.assign(Object.assign({}, config === null || config === void 0 ? void 0 : config.headers), { 'X-JS-SDK-VERSION': version });
    return Object.assign(Object.assign({}, config), { headers });
};
const checkForDeprecationHeader = (response) => {
    var _a;
    const deprecationNotice = response.headers['x-deprecation-notice'];
    if (deprecationNotice) {
        const method = (_a = response.config.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();
        const path = response.config.url;
        console.warn(`%cDeprecation Notice%c Method: ${method}, Path: ${path}, Notice: ${deprecationNotice}`, 'color: white; background-color: red; font-weight: bold; padding: 2px 4px;', 'color: red; font-weight: bold;');
    }
    return response;
};
const axiosGet = (url, config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default
        .get(url, addSdkVersionHeader(config))
        .then((response) => checkForDeprecationHeader(response));
});
exports.axiosGet = axiosGet;
const axiosPost = (url, data, config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default
        .post(url, data, addSdkVersionHeader(config))
        .then((response) => checkForDeprecationHeader(response));
});
exports.axiosPost = axiosPost;
const axiosPut = (url, data, config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default
        .put(url, data, addSdkVersionHeader(config))
        .then((response) => checkForDeprecationHeader(response));
});
exports.axiosPut = axiosPut;
const axiosDelete = (url, config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default
        .delete(url, addSdkVersionHeader(config))
        .then((response) => checkForDeprecationHeader(response));
});
exports.axiosDelete = axiosDelete;
//# sourceMappingURL=axiosUtil.js.map