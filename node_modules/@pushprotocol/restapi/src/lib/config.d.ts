export declare const API_BASE_URL: {
    prod: string;
    staging: string;
    dev: string;
    /**
     * **This is for local development only**
     */
    local: string;
};
export type ALIAS_CHAIN = 'POLYGON' | 'BSC' | 'OPTIMISM' | 'POLYGONZKEVM' | 'ARBITRUMONE' | 'FUSE';
export declare const ETH_CHAIN_ID: {
    prod: number;
    staging: number;
    dev: number;
    local: number;
};
export declare const ALIAS_CHAIN_ID: {
    POLYGON: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    BSC: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    OPTIMISM: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    POLYGONZKEVM: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    ARBITRUMONE: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    FUSE: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
};
export declare const CHAIN_ID: {
    POLYGON: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    BSC: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    OPTIMISM: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    POLYGONZKEVM: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    ARBITRUMONE: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    FUSE: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
    ETHEREUM: {
        prod: number;
        staging: number;
        dev: number;
        local: number;
    };
};
export declare const CHAIN_NAME: {
    [key: number]: string;
};
export interface ConfigType {
    API_BASE_URL: string;
    EPNS_COMMUNICATOR_CONTRACT: string;
}
export declare const VIEM_CORE_CONFIG: {
    prod: {
        NETWORK: import("viem/_types/types/utils").Assign<{
            readonly id: 1;
            readonly network: "homestead";
            readonly name: "Ethereum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://eth-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://eth-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://mainnet.infura.io/v3"];
                    /**
                     * **This is for local development only**
                     */
                    readonly webSocket: readonly ["wss://mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://cloudflare-eth.com"];
                };
                readonly public: {
                    readonly http: readonly ["https://cloudflare-eth.com"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Etherscan";
                    readonly url: "https://etherscan.io";
                };
                readonly default: {
                    readonly name: "Etherscan";
                    readonly url: "https://etherscan.io";
                };
            };
            readonly contracts: {
                readonly ensRegistry: {
                    readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                };
                readonly ensUniversalResolver: {
                    readonly address: "0xc0497E381f536Be9ce14B0dD3817cBcAe57d2F62";
                    readonly blockCreated: 16966585;
                };
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 14353601;
                };
            };
        }, import("viem/_types/types/chain").ChainConfig<undefined>>;
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
    staging: {
        NETWORK: import("viem/_types/types/utils").Assign<{
            readonly id: 11155111;
            readonly network: "sepolia";
            readonly name: "Sepolia";
            readonly nativeCurrency: {
                readonly name: "Sepolia Ether";
                readonly symbol: "SEP";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://sepolia.infura.io/v3"];
                    readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://rpc.sepolia.org"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.sepolia.org"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                };
                readonly default: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 751532;
                };
                readonly ensRegistry: {
                    readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                };
                readonly ensUniversalResolver: {
                    readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                    readonly blockCreated: 3914906;
                };
            };
            readonly testnet: true;
        }, import("viem/_types/types/chain").ChainConfig<undefined>>;
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
    dev: {
        NETWORK: import("viem/_types/types/utils").Assign<{
            readonly id: 11155111;
            readonly network: "sepolia";
            readonly name: "Sepolia";
            readonly nativeCurrency: {
                readonly name: "Sepolia Ether";
                readonly symbol: "SEP";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://sepolia.infura.io/v3"];
                    readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://rpc.sepolia.org"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.sepolia.org"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                };
                readonly default: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 751532;
                };
                readonly ensRegistry: {
                    readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                };
                readonly ensUniversalResolver: {
                    readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                    readonly blockCreated: 3914906;
                };
            };
            readonly testnet: true;
        }, import("viem/_types/types/chain").ChainConfig<undefined>>;
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
    local: {
        NETWORK: import("viem/_types/types/utils").Assign<{
            readonly id: 11155111;
            readonly network: "sepolia";
            readonly name: "Sepolia";
            readonly nativeCurrency: {
                readonly name: "Sepolia Ether";
                readonly symbol: "SEP";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://sepolia.infura.io/v3"];
                    readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://rpc.sepolia.org"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.sepolia.org"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                };
                readonly default: {
                    readonly name: "Etherscan";
                    readonly url: "https://sepolia.etherscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 751532;
                };
                readonly ensRegistry: {
                    readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                };
                readonly ensUniversalResolver: {
                    readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                    readonly blockCreated: 3914906;
                };
            };
            readonly testnet: true;
        }, import("viem/_types/types/chain").ChainConfig<undefined>>;
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
};
export declare const CORE_CONFIG: {
    prod: {
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
    staging: {
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
    dev: {
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
    local: {
        API_BASE_URL: string;
        EPNS_CORE_CONTRACT: string;
    };
};
declare const CONFIG: {
    prod: {
        [x: string]: {
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
    staging: {
        [x: string]: {
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
    dev: {
        [x: string]: {
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
    local: {
        [x: string]: {
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
};
export default CONFIG;
export declare const TOKEN: {
    prod: string;
    staging: string;
    dev: string;
    local: string;
};
export declare const TOKEN_VIEM_NETWORK_MAP: {
    prod: import("viem/_types/types/utils").Assign<{
        readonly id: 1;
        readonly network: "homestead";
        readonly name: "Ethereum";
        readonly nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        readonly rpcUrls: {
            readonly alchemy: {
                readonly http: readonly ["https://eth-mainnet.g.alchemy.com/v2"];
                readonly webSocket: readonly ["wss://eth-mainnet.g.alchemy.com/v2"];
            };
            readonly infura: {
                readonly http: readonly ["https://mainnet.infura.io/v3"];
                /**
                 * **This is for local development only**
                 */
                readonly webSocket: readonly ["wss://mainnet.infura.io/ws/v3"];
            };
            readonly default: {
                readonly http: readonly ["https://cloudflare-eth.com"];
            };
            readonly public: {
                readonly http: readonly ["https://cloudflare-eth.com"];
            };
        };
        readonly blockExplorers: {
            readonly etherscan: {
                readonly name: "Etherscan";
                readonly url: "https://etherscan.io";
            };
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://etherscan.io";
            };
        };
        readonly contracts: {
            readonly ensRegistry: {
                readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
            };
            readonly ensUniversalResolver: {
                readonly address: "0xc0497E381f536Be9ce14B0dD3817cBcAe57d2F62";
                readonly blockCreated: 16966585;
            };
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 14353601;
            };
        };
    }, import("viem/_types/types/chain").ChainConfig<undefined>>;
    staging: import("viem/_types/types/utils").Assign<{
        readonly id: 11155111;
        readonly network: "sepolia";
        readonly name: "Sepolia";
        readonly nativeCurrency: {
            readonly name: "Sepolia Ether";
            readonly symbol: "SEP";
            readonly decimals: 18;
        };
        readonly rpcUrls: {
            readonly alchemy: {
                readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
            };
            readonly infura: {
                readonly http: readonly ["https://sepolia.infura.io/v3"];
                readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
            };
            readonly default: {
                readonly http: readonly ["https://rpc.sepolia.org"];
            };
            readonly public: {
                readonly http: readonly ["https://rpc.sepolia.org"];
            };
        };
        readonly blockExplorers: {
            readonly etherscan: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
            };
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
            };
        };
        readonly contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 751532;
            };
            readonly ensRegistry: {
                readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
            };
            readonly ensUniversalResolver: {
                readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                readonly blockCreated: 3914906;
            };
        };
        readonly testnet: true;
    }, import("viem/_types/types/chain").ChainConfig<undefined>>;
    dev: import("viem/_types/types/utils").Assign<{
        readonly id: 11155111;
        readonly network: "sepolia";
        readonly name: "Sepolia";
        readonly nativeCurrency: {
            readonly name: "Sepolia Ether";
            readonly symbol: "SEP";
            readonly decimals: 18;
        };
        readonly rpcUrls: {
            readonly alchemy: {
                readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
            };
            readonly infura: {
                readonly http: readonly ["https://sepolia.infura.io/v3"];
                readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
            };
            readonly default: {
                readonly http: readonly ["https://rpc.sepolia.org"];
            };
            readonly public: {
                readonly http: readonly ["https://rpc.sepolia.org"];
            };
        };
        readonly blockExplorers: {
            readonly etherscan: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
            };
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
            };
        };
        readonly contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 751532;
            };
            readonly ensRegistry: {
                readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
            };
            readonly ensUniversalResolver: {
                readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                readonly blockCreated: 3914906;
            };
        };
        readonly testnet: true;
    }, import("viem/_types/types/chain").ChainConfig<undefined>>;
    local: import("viem/_types/types/utils").Assign<{
        readonly id: 11155111;
        readonly network: "sepolia";
        readonly name: "Sepolia";
        readonly nativeCurrency: {
            readonly name: "Sepolia Ether";
            readonly symbol: "SEP";
            readonly decimals: 18;
        };
        readonly rpcUrls: {
            readonly alchemy: {
                readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
            };
            readonly infura: {
                readonly http: readonly ["https://sepolia.infura.io/v3"];
                readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
            };
            readonly default: {
                readonly http: readonly ["https://rpc.sepolia.org"];
            };
            readonly public: {
                readonly http: readonly ["https://rpc.sepolia.org"];
            };
        };
        readonly blockExplorers: {
            readonly etherscan: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
            };
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
            };
        };
        readonly contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 751532;
            };
            readonly ensRegistry: {
                readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
            };
            readonly ensUniversalResolver: {
                readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                readonly blockCreated: 3914906;
            };
        };
        readonly testnet: true;
    }, import("viem/_types/types/chain").ChainConfig<undefined>>;
};
export declare const MIN_TOKEN_BALANCE: {
    prod: number;
    staging: number;
    dev: number;
    local: number;
};
export declare const ABIS: {
    CORE: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "enum EPNSCoreStorageV1_5.ChannelType";
            readonly name: "channelType";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "identity";
            readonly type: "bytes";
        }];
        readonly name: "AddChannel";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_subGraphData";
            readonly type: "bytes";
        }];
        readonly name: "AddSubGraph";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }];
        readonly name: "ChannelBlocked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalNotifOptions";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "_notifSettings";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "_notifDescription";
            readonly type: "string";
        }];
        readonly name: "ChannelNotifcationSettingsAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "ChannelOwnershipTransfer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "revoker";
            readonly type: "address";
        }];
        readonly name: "ChannelVerificationRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }];
        readonly name: "ChannelVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountClaimed";
            readonly type: "uint256";
        }];
        readonly name: "ChatIncentiveClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountRefunded";
            readonly type: "uint256";
        }];
        readonly name: "DeactivateChannel";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "requestSender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "requestReceiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amountForReqReceiver";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "feePoolAmount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }];
        readonly name: "IncentivizeChatReqReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountDeposited";
            readonly type: "uint256";
        }];
        readonly name: "ReactivateChannel";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "rewardAmount";
            readonly type: "uint256";
        }];
        readonly name: "RewardsClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "rewardAmount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fromEpoch";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tillEpoch";
            readonly type: "uint256";
        }];
        readonly name: "RewardsHarvested";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountStaked";
            readonly type: "uint256";
        }];
        readonly name: "Staked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountRefunded";
            readonly type: "uint256";
        }];
        readonly name: "TimeBoundChannelDestroyed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountUnstaked";
            readonly type: "uint256";
        }];
        readonly name: "Unstaked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "identity";
            readonly type: "bytes";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "amountDeposited";
            readonly type: "uint256";
        }];
        readonly name: "UpdateChannel";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ADD_CHANNEL_MIN_FEES";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CHANNEL_POOL_FUNDS";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CREATE_CHANNEL_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DOMAIN_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "FEE_AMOUNT";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MIN_POOL_CONTRIBUTION";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PROTOCOL_POOL_FEES";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PUSH_TOKEN_ADDRESS";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "REFERRAL_CODE";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UNISWAP_V2_ROUTER";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "WETH_ADDRESS";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "aDaiAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_rewardAmount";
            readonly type: "uint256";
        }];
        readonly name: "addPoolFees";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_subGraphData";
            readonly type: "bytes";
        }];
        readonly name: "addSubGraph";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_startIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_endIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "_channelList";
            readonly type: "address[]";
        }];
        readonly name: "batchVerification";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channelAddress";
            readonly type: "address";
        }];
        readonly name: "blockChannel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_epochId";
            readonly type: "uint256";
        }];
        readonly name: "calculateEpochRewards";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "rewards";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "celebUserFunds";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "channelById";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "channelNotifSettings";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "channelUpdateCounter";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "channels";
        readonly outputs: readonly [{
            readonly internalType: "enum EPNSCoreStorageV1_5.ChannelType";
            readonly name: "channelType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "channelState";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "verifiedBy";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "poolContribution";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "channelHistoricalZ";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "channelFairShareCount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "channelLastUpdate";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "channelStartBlock";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "channelUpdateBlock";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "channelWeight";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiryTime";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "channelsCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "claimChatIncentives";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_notifOptions";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "_notifSettings";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_notifDescription";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amountDeposited";
            readonly type: "uint256";
        }];
        readonly name: "createChannelSettings";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "enum EPNSCoreStorageV1_5.ChannelType";
            readonly name: "_channelType";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_identity";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_channelExpiryTime";
            readonly type: "uint256";
        }];
        readonly name: "createChannelWithPUSH";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "daiAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_tillEpoch";
            readonly type: "uint256";
        }];
        readonly name: "daoHarvestPaginated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "deactivateChannel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channelAddress";
            readonly type: "address";
        }];
        readonly name: "destroyTimeBoundChannel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "epnsCommunicator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "epochDuration";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "epochRewards";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "epochToTotalStakedWeight";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "genesisEpoch";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }];
        readonly name: "getChannelVerfication";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "verificationStatus";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "governance";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "groupFairShareCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "groupHistoricalZ";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "groupLastUpdate";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "groupNormalizedWeight";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "requestSender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "requestReceiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "handleChatRequestData";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "harvestAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_tillEpoch";
            readonly type: "uint256";
        }];
        readonly name: "harvestPaginated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_pushChannelAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_pushTokenAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_wethAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_uniswapRouterAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lendingPoolProviderAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_daiAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_aDaiAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_referralCode";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "initializeStake";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isMigrationComplete";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_from";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_to";
            readonly type: "uint256";
        }];
        readonly name: "lastEpochRelative";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lendingPoolProviderAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pauseContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "previouslySetEpochRewards";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pushChannelAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "reactivateChannel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_commAddress";
            readonly type: "address";
        }];
        readonly name: "setEpnsCommunicatorAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newFees";
            readonly type: "uint256";
        }];
        readonly name: "setFeeAmount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_governanceAddress";
            readonly type: "address";
        }];
        readonly name: "setGovernanceAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newFees";
            readonly type: "uint256";
        }];
        readonly name: "setMinChannelCreationFees";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newAmount";
            readonly type: "uint256";
        }];
        readonly name: "setMinPoolContribution";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "stake";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalStakedAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_newAdmin";
            readonly type: "address";
        }];
        readonly name: "transferPushChannelAdminControl";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unPauseContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unstake";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }];
        readonly name: "unverifyChannel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_newIdentity";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "updateChannelMeta";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "userFeesInfo";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "stakedAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "stakedWeight";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastStakedBlock";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastClaimedBlock";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "usersRewardsClaimed";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }];
        readonly name: "verifyChannel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    COMM: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly name: "AddDelegate";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "_chainName";
            readonly type: "string";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "_chainID";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_channelOwnerAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "_ethereumChannelAddress";
            readonly type: "string";
        }];
        readonly name: "ChannelAlias";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "publickey";
            readonly type: "bytes";
        }];
        readonly name: "PublicKeyRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly name: "RemoveDelegate";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "identity";
            readonly type: "bytes";
        }];
        readonly name: "SendNotification";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "Subscribe";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }];
        readonly name: "Unsubscribe";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_notifID";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "_notifSettings";
            readonly type: "string";
        }];
        readonly name: "UserNotifcationSettingsAdded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DOMAIN_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "EPNSCoreAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "NAME_HASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SEND_NOTIFICATION_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "SUBSCRIBE_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UNSUBSCRIBE_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "addDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_channelList";
            readonly type: "address[]";
        }];
        readonly name: "batchSubscribe";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_channelList";
            readonly type: "address[]";
        }];
        readonly name: "batchUnsubscribe";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_publicKey";
            readonly type: "bytes";
        }];
        readonly name: "broadcastUserPublicKey";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "chainID";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "chainName";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_notifID";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "_notifSettings";
            readonly type: "string";
        }];
        readonly name: "changeUserChannelSettings";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "completeMigration";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "delegatedNotificationSenders";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_publicKey";
            readonly type: "bytes";
        }];
        readonly name: "getWalletFromPublicKey";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "wallet";
            readonly type: "address";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "governance";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_pushChannelAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "_chainName";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isMigrationComplete";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "isUserSubscribed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isSubscriber";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "mapAddressUsers";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_startIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_endIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "_channelList";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "_usersList";
            readonly type: "address[]";
        }];
        readonly name: "migrateSubscribeData";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pushChannelAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }];
        readonly name: "removeDelegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_identity";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "sendNotifBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_identity";
            readonly type: "bytes";
        }];
        readonly name: "sendNotification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_coreAddress";
            readonly type: "address";
        }];
        readonly name: "setEPNSCoreAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_governanceAddress";
            readonly type: "address";
        }];
        readonly name: "setGovernanceAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }];
        readonly name: "subscribe";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "subscribeBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }];
        readonly name: "subscribeViaCore";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_newAdmin";
            readonly type: "address";
        }];
        readonly name: "transferPushChannelAdminControl";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_channel";
            readonly type: "address";
        }];
        readonly name: "unsubscribe";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "channel";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "unsubscribeBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "userToChannelNotifs";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "users";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "userActivated";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "publicKeyRegistered";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "userStartBlock";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "subscribedCount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "usersCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_channelAddress";
            readonly type: "string";
        }];
        readonly name: "verifyChannelAlias";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    TOKEN: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "fromDelegate";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "toDelegate";
            readonly type: "address";
        }];
        readonly name: "DelegateChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "previousBalance";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newBalance";
            readonly type: "uint256";
        }];
        readonly name: "DelegateVotesChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "holder";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "weight";
            readonly type: "uint256";
        }];
        readonly name: "HolderWeightChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DELEGATION_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DOMAIN_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PERMIT_TYPEHASH";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "rawAmount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "born";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "rawAmount";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "checkpoints";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "fromBlock";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint96";
            readonly name: "votes";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }];
        readonly name: "delegate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegatee";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "delegateBySig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "delegates";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "getCurrentVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint96";
            readonly name: "";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly name: "getPriorVotes";
        readonly outputs: readonly [{
            readonly internalType: "uint96";
            readonly name: "";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "holderDelegation";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "holderWeight";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "numCheckpoints";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "rawAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "permit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "holder";
            readonly type: "address";
        }];
        readonly name: "resetHolderWeight";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }];
        readonly name: "returnHolderDelegation";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "returnHolderRatio";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "delegate";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "value";
            readonly type: "bool";
        }];
        readonly name: "setHolderDelegation";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "dst";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "rawAmount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "src";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "dst";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "rawAmount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
};
export declare const CHANNEL_TYPE: {
    TIMEBOUND: number;
    GENERAL: number;
};
export declare const VIEM_CONFIG: {
    prod: {
        [x: string]: {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 1;
                readonly network: "homestead";
                readonly name: "Ethereum";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://eth-mainnet.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://eth-mainnet.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://mainnet.infura.io/v3"];
                        /**
                         * **This is for local development only**
                         */
                        readonly webSocket: readonly ["wss://mainnet.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://cloudflare-eth.com"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://cloudflare-eth.com"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly ensRegistry: {
                        readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                    };
                    readonly ensUniversalResolver: {
                        readonly address: "0xc0497E381f536Be9ce14B0dD3817cBcAe57d2F62";
                        readonly blockCreated: 16966585;
                    };
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 14353601;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 137;
                readonly name: "Polygon";
                readonly network: "matic";
                readonly nativeCurrency: {
                    readonly name: "MATIC";
                    readonly symbol: "MATIC";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://polygon-mainnet.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://polygon-mainnet.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://polygon-mainnet.infura.io/v3"];
                        readonly webSocket: readonly ["wss://polygon-mainnet.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://polygon-rpc.com"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://polygon-rpc.com"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "PolygonScan";
                        readonly url: "https://polygonscan.com";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://polygonscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 25770160;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 56;
                readonly name: "BNB Smart Chain";
                readonly network: "bsc";
                readonly nativeCurrency: {
                    readonly decimals: 18;
                    readonly name: "BNB";
                    readonly symbol: "BNB";
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.ankr.com/bsc"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.ankr.com/bsc"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "BscScan";
                        readonly url: "https://bscscan.com";
                    };
                    readonly default: {
                        readonly name: "BscScan";
                        readonly url: "https://bscscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 15921452;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 10;
                readonly name: "OP Mainnet";
                readonly network: "optimism";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://opt-mainnet.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://opt-mainnet.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://optimism-mainnet.infura.io/v3"];
                        readonly webSocket: readonly ["wss://optimism-mainnet.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://mainnet.optimism.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://mainnet.optimism.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://optimistic.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Optimism Explorer";
                        readonly url: "https://explorer.optimism.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 4286263;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<{
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcBlock<import("viem").BlockTag, boolean, import("viem").RpcTransaction<boolean, "yParity", "typeHex">>>, import("viem/_types/chains/optimism/types").OptimismRpcBlockOverrides & {
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>[];
                    }>) => {
                        baseFeePerGas: bigint | null;
                        difficulty: bigint;
                        extraData: `0x${string}`;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: `0x${string}`;
                        mixHash: `0x${string}`;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentHash: `0x${string}`;
                        receiptsRoot: `0x${string}`;
                        sealFields: `0x${string}`[];
                        sha3Uncles: `0x${string}`;
                        size: bigint;
                        stateRoot: `0x${string}`;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismTransaction<boolean>[];
                        transactionsRoot: `0x${string}`;
                        uncles: `0x${string}`[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: `0x${string}` | undefined;
                    };
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    })) => {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas: undefined;
                        maxPriorityFeePerGas: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    };
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcTransactionReceipt>, import("viem/_types/chains/optimism/types").OptimismRpcTransactionReceiptOverrides>) => {
                        blockHash: `0x${string}`;
                        blockNumber: bigint;
                        contractAddress: `0x${string}` | null;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: `0x${string}`;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                        logsBloom: `0x${string}`;
                        status: "success" | "reverted";
                        to: `0x${string}` | null;
                        transactionHash: `0x${string}`;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    };
                    type: "transactionReceipt";
                };
            }>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 1101;
                readonly name: "Polygon zkEVM";
                readonly network: "polygon-zkevm";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://zkevm-rpc.com"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://zkevm-rpc.com"];
                    };
                };
                readonly blockExplorers: {
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://zkevm.polygonscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 57746;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 42161;
                readonly name: "Arbitrum One";
                readonly network: "arbitrum";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                        readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Arbiscan";
                        readonly url: "https://arbiscan.io";
                    };
                    readonly default: {
                        readonly name: "Arbiscan";
                        readonly url: "https://arbiscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 7654707;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 122;
                readonly name: "Fuse";
                readonly network: "fuse";
                readonly nativeCurrency: {
                    readonly name: "Fuse";
                    readonly symbol: "FUSE";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.fuse.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.fuse.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly default: {
                        readonly name: "Fuse Explorer";
                        readonly url: "https://explorer.fuse.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 16146628;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
    staging: {
        [x: string]: {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 11155111;
                readonly network: "sepolia";
                readonly name: "Sepolia";
                readonly nativeCurrency: {
                    readonly name: "Sepolia Ether";
                    readonly symbol: "SEP";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://sepolia.infura.io/v3"];
                        readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://rpc.sepolia.org"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.sepolia.org"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://sepolia.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://sepolia.etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 751532;
                    };
                    readonly ensRegistry: {
                        readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                    };
                    readonly ensUniversalResolver: {
                        readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                        readonly blockCreated: 3914906;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 80001;
                readonly name: "Polygon Mumbai";
                readonly network: "maticmum";
                readonly nativeCurrency: {
                    readonly name: "MATIC";
                    readonly symbol: "MATIC";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://polygon-mumbai.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://polygon-mumbai.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://polygon-mumbai.infura.io/v3"]; /**
                         * **This is for local development only**
                         */
                        readonly webSocket: readonly ["wss://polygon-mumbai.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "PolygonScan";
                        readonly url: "https://mumbai.polygonscan.com";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://mumbai.polygonscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 25770160;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 97;
                readonly name: "Binance Smart Chain Testnet";
                readonly network: "bsc-testnet";
                readonly nativeCurrency: {
                    readonly decimals: 18;
                    readonly name: "BNB";
                    readonly symbol: "tBNB";
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "BscScan";
                        readonly url: "https://testnet.bscscan.com";
                    };
                    readonly default: {
                        readonly name: "BscScan";
                        readonly url: "https://testnet.bscscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 17422483;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 420;
                readonly name: "Optimism Goerli";
                readonly network: "optimism-goerli";
                readonly nativeCurrency: {
                    readonly name: "Goerli Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://opt-goerli.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://opt-goerli.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://optimism-goerli.infura.io/v3"];
                        readonly webSocket: readonly ["wss://optimism-goerli.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://goerli.optimism.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://goerli.optimism.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://goerli-optimism.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://goerli-optimism.etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 49461;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<{
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcBlock<import("viem").BlockTag, boolean, import("viem").RpcTransaction<boolean, "yParity", "typeHex">>>, import("viem/_types/chains/optimism/types").OptimismRpcBlockOverrides & {
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>[];
                    }>) => {
                        baseFeePerGas: bigint | null;
                        difficulty: bigint;
                        extraData: `0x${string}`;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: `0x${string}`;
                        mixHash: `0x${string}`;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentHash: `0x${string}`;
                        receiptsRoot: `0x${string}`;
                        sealFields: `0x${string}`[];
                        sha3Uncles: `0x${string}`;
                        size: bigint;
                        stateRoot: `0x${string}`;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismTransaction<boolean>[];
                        transactionsRoot: `0x${string}`;
                        uncles: `0x${string}`[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: `0x${string}` | undefined;
                    };
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    })) => {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas: undefined;
                        maxPriorityFeePerGas: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    };
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcTransactionReceipt>, import("viem/_types/chains/optimism/types").OptimismRpcTransactionReceiptOverrides>) => {
                        blockHash: `0x${string}`;
                        blockNumber: bigint;
                        contractAddress: `0x${string}` | null;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: `0x${string}`;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                        logsBloom: `0x${string}`;
                        status: "success" | "reverted";
                        to: `0x${string}` | null;
                        transactionHash: `0x${string}`;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    };
                    type: "transactionReceipt";
                };
            }>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 1442;
                readonly name: "Polygon zkEVM Testnet";
                readonly network: "polygon-zkevm-testnet";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.public.zkevm-test.net"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.public.zkevm-test.net"];
                    };
                };
                readonly blockExplorers: {
                    readonly blockscout: {
                        readonly name: "Blockscout";
                        readonly url: "https://explorer.public.zkevm-test.net";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://testnet-zkevm.polygonscan.com";
                    };
                };
                readonly testnet: true;
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 525686;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 421613;
                readonly name: "Arbitrum Goerli";
                readonly network: "arbitrum-goerli";
                readonly nativeCurrency: {
                    readonly name: "Arbitrum Goerli Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                        readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Arbiscan";
                        readonly url: "https://goerli.arbiscan.io";
                    };
                    readonly default: {
                        readonly name: "Arbiscan";
                        readonly url: "https://goerli.arbiscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 88114;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 123;
                readonly name: "Fuse Sparknet";
                readonly network: "fuse";
                readonly nativeCurrency: {
                    readonly name: "Spark";
                    readonly symbol: "SPARK";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.fusespark.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.fusespark.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly default: {
                        readonly name: "Sparkent Explorer";
                        readonly url: "https://explorer.fusespark.io";
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
    dev: {
        [x: string]: {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 11155111;
                readonly network: "sepolia";
                readonly name: "Sepolia";
                readonly nativeCurrency: {
                    readonly name: "Sepolia Ether";
                    readonly symbol: "SEP";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://sepolia.infura.io/v3"];
                        readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://rpc.sepolia.org"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.sepolia.org"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://sepolia.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://sepolia.etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 751532;
                    };
                    readonly ensRegistry: {
                        readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                    };
                    readonly ensUniversalResolver: {
                        readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                        readonly blockCreated: 3914906;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 80001;
                readonly name: "Polygon Mumbai";
                readonly network: "maticmum";
                readonly nativeCurrency: {
                    readonly name: "MATIC";
                    readonly symbol: "MATIC";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://polygon-mumbai.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://polygon-mumbai.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://polygon-mumbai.infura.io/v3"]; /**
                         * **This is for local development only**
                         */
                        readonly webSocket: readonly ["wss://polygon-mumbai.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "PolygonScan";
                        readonly url: "https://mumbai.polygonscan.com";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://mumbai.polygonscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 25770160;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 97;
                readonly name: "Binance Smart Chain Testnet";
                readonly network: "bsc-testnet";
                readonly nativeCurrency: {
                    readonly decimals: 18;
                    readonly name: "BNB";
                    readonly symbol: "tBNB";
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "BscScan";
                        readonly url: "https://testnet.bscscan.com";
                    };
                    readonly default: {
                        readonly name: "BscScan";
                        readonly url: "https://testnet.bscscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 17422483;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 420;
                readonly name: "Optimism Goerli";
                readonly network: "optimism-goerli";
                readonly nativeCurrency: {
                    readonly name: "Goerli Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://opt-goerli.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://opt-goerli.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://optimism-goerli.infura.io/v3"];
                        readonly webSocket: readonly ["wss://optimism-goerli.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://goerli.optimism.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://goerli.optimism.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://goerli-optimism.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://goerli-optimism.etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 49461;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<{
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcBlock<import("viem").BlockTag, boolean, import("viem").RpcTransaction<boolean, "yParity", "typeHex">>>, import("viem/_types/chains/optimism/types").OptimismRpcBlockOverrides & {
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>[];
                    }>) => {
                        baseFeePerGas: bigint | null;
                        difficulty: bigint;
                        extraData: `0x${string}`;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: `0x${string}`;
                        mixHash: `0x${string}`;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentHash: `0x${string}`;
                        receiptsRoot: `0x${string}`;
                        sealFields: `0x${string}`[];
                        sha3Uncles: `0x${string}`;
                        size: bigint;
                        stateRoot: `0x${string}`;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismTransaction<boolean>[];
                        transactionsRoot: `0x${string}`;
                        uncles: `0x${string}`[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: `0x${string}` | undefined;
                    };
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    })) => {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas: undefined;
                        maxPriorityFeePerGas: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    };
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcTransactionReceipt>, import("viem/_types/chains/optimism/types").OptimismRpcTransactionReceiptOverrides>) => {
                        blockHash: `0x${string}`;
                        blockNumber: bigint;
                        contractAddress: `0x${string}` | null;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: `0x${string}`;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                        logsBloom: `0x${string}`;
                        status: "success" | "reverted";
                        to: `0x${string}` | null;
                        transactionHash: `0x${string}`;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    };
                    type: "transactionReceipt";
                };
            }>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 1442;
                readonly name: "Polygon zkEVM Testnet";
                readonly network: "polygon-zkevm-testnet";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.public.zkevm-test.net"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.public.zkevm-test.net"];
                    };
                };
                readonly blockExplorers: {
                    readonly blockscout: {
                        readonly name: "Blockscout";
                        readonly url: "https://explorer.public.zkevm-test.net";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://testnet-zkevm.polygonscan.com";
                    };
                };
                readonly testnet: true;
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 525686;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 421613;
                readonly name: "Arbitrum Goerli";
                readonly network: "arbitrum-goerli";
                readonly nativeCurrency: {
                    readonly name: "Arbitrum Goerli Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                        readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Arbiscan";
                        readonly url: "https://goerli.arbiscan.io";
                    };
                    readonly default: {
                        readonly name: "Arbiscan";
                        readonly url: "https://goerli.arbiscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 88114;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 123;
                readonly name: "Fuse Sparknet";
                readonly network: "fuse";
                readonly nativeCurrency: {
                    readonly name: "Spark";
                    readonly symbol: "SPARK";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.fusespark.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.fusespark.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly default: {
                        readonly name: "Sparkent Explorer";
                        readonly url: "https://explorer.fusespark.io";
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
    local: {
        [x: string]: {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 11155111;
                readonly network: "sepolia";
                readonly name: "Sepolia";
                readonly nativeCurrency: {
                    readonly name: "Sepolia Ether";
                    readonly symbol: "SEP";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://eth-sepolia.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://eth-sepolia.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://sepolia.infura.io/v3"];
                        readonly webSocket: readonly ["wss://sepolia.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://rpc.sepolia.org"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.sepolia.org"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://sepolia.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://sepolia.etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 751532;
                    };
                    readonly ensRegistry: {
                        readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
                    };
                    readonly ensUniversalResolver: {
                        readonly address: "0x21B000Fd62a880b2125A61e36a284BB757b76025";
                        readonly blockCreated: 3914906;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 80001;
                readonly name: "Polygon Mumbai";
                readonly network: "maticmum";
                readonly nativeCurrency: {
                    readonly name: "MATIC";
                    readonly symbol: "MATIC";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://polygon-mumbai.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://polygon-mumbai.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://polygon-mumbai.infura.io/v3"]; /**
                         * **This is for local development only**
                         */
                        readonly webSocket: readonly ["wss://polygon-mumbai.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.ankr.com/polygon_mumbai"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "PolygonScan";
                        readonly url: "https://mumbai.polygonscan.com";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://mumbai.polygonscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 25770160;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 97;
                readonly name: "Binance Smart Chain Testnet";
                readonly network: "bsc-testnet";
                readonly nativeCurrency: {
                    readonly decimals: 18;
                    readonly name: "BNB";
                    readonly symbol: "tBNB";
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "BscScan";
                        readonly url: "https://testnet.bscscan.com";
                    };
                    readonly default: {
                        readonly name: "BscScan";
                        readonly url: "https://testnet.bscscan.com";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 17422483;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 420;
                readonly name: "Optimism Goerli";
                readonly network: "optimism-goerli";
                readonly nativeCurrency: {
                    readonly name: "Goerli Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://opt-goerli.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://opt-goerli.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://optimism-goerli.infura.io/v3"];
                        readonly webSocket: readonly ["wss://optimism-goerli.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://goerli.optimism.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://goerli.optimism.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Etherscan";
                        readonly url: "https://goerli-optimism.etherscan.io";
                    };
                    readonly default: {
                        readonly name: "Etherscan";
                        readonly url: "https://goerli-optimism.etherscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 49461;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<{
                readonly block: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcBlock<import("viem").BlockTag, boolean, import("viem").RpcTransaction<boolean, "yParity", "typeHex">>>, import("viem/_types/chains/optimism/types").OptimismRpcBlockOverrides & {
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>[];
                    }>) => {
                        baseFeePerGas: bigint | null;
                        difficulty: bigint;
                        extraData: `0x${string}`;
                        gasLimit: bigint;
                        gasUsed: bigint;
                        hash: `0x${string}` | null;
                        logsBloom: `0x${string}` | null;
                        miner: `0x${string}`;
                        mixHash: `0x${string}`;
                        nonce: `0x${string}` | null;
                        number: bigint | null;
                        parentHash: `0x${string}`;
                        receiptsRoot: `0x${string}`;
                        sealFields: `0x${string}`[];
                        sha3Uncles: `0x${string}`;
                        size: bigint;
                        stateRoot: `0x${string}`;
                        timestamp: bigint;
                        totalDifficulty: bigint | null;
                        transactions: `0x${string}`[] | import("viem/_types/chains/optimism/types").OptimismTransaction<boolean>[];
                        transactionsRoot: `0x${string}`;
                        uncles: `0x${string}`[];
                        withdrawals?: import("viem").Withdrawal[] | undefined;
                        withdrawalsRoot?: `0x${string}` | undefined;
                    };
                    type: "block";
                };
                readonly transaction: {
                    exclude: [] | undefined;
                    format: (args: (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionLegacy<`0x${string}`, `0x${string}`, boolean, "0x0">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP2930<`0x${string}`, `0x${string}`, boolean, "0x1">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex"> & {
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    }) | (import("viem/_types/types/utils").Assign_<Partial<Omit<import("viem/_types/types/utils").PartialBy<import("viem").TransactionEIP1559<`0x${string}`, `0x${string}`, boolean, "0x2">, "yParity">, "typeHex">>, import("viem/_types/chains/optimism/types").OptimismRpcTransaction<boolean>> & Omit<import("viem").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("viem").FeeValuesEIP1559<`0x${string}`> & {
                        isSystemTx?: boolean | undefined;
                        mint?: `0x${string}` | undefined;
                        sourceHash: `0x${string}`;
                        type: "0x7e";
                    })) => {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity?: undefined;
                        type: "legacy";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList?: undefined;
                        chainId?: number | undefined;
                        yParity: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas?: undefined;
                        maxPriorityFeePerGas?: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice: bigint;
                        maxFeePerGas: undefined;
                        maxPriorityFeePerGas: undefined;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip2930";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "eip1559";
                        isSystemTx?: undefined;
                        mint?: undefined;
                        sourceHash?: undefined;
                    } | {
                        blockHash: `0x${string}` | null;
                        blockNumber: bigint | null;
                        from: `0x${string}`;
                        gas: bigint;
                        hash: `0x${string}`;
                        input: `0x${string}`;
                        nonce: number;
                        r: `0x${string}`;
                        s: `0x${string}`;
                        to: `0x${string}` | null;
                        transactionIndex: number | null;
                        typeHex: `0x${string}` | null;
                        v: bigint;
                        value: bigint;
                        yParity: number;
                        gasPrice?: undefined;
                        maxFeePerGas: bigint;
                        maxPriorityFeePerGas: bigint;
                        accessList: import("viem").AccessList;
                        chainId: number;
                        type: "deposit";
                        isSystemTx?: boolean | undefined;
                        mint?: bigint | undefined;
                        sourceHash: `0x${string}`;
                    };
                    type: "transaction";
                };
                readonly transactionReceipt: {
                    exclude: [] | undefined;
                    format: (args: import("viem/_types/types/utils").Assign<Partial<import("viem").RpcTransactionReceipt>, import("viem/_types/chains/optimism/types").OptimismRpcTransactionReceiptOverrides>) => {
                        blockHash: `0x${string}`;
                        blockNumber: bigint;
                        contractAddress: `0x${string}` | null;
                        cumulativeGasUsed: bigint;
                        effectiveGasPrice: bigint;
                        from: `0x${string}`;
                        gasUsed: bigint;
                        logs: import("viem").Log<bigint, number, false, undefined, undefined, undefined, undefined>[];
                        logsBloom: `0x${string}`;
                        status: "success" | "reverted";
                        to: `0x${string}` | null;
                        transactionHash: `0x${string}`;
                        transactionIndex: number;
                        type: import("viem").TransactionType;
                        l1GasPrice: bigint | null;
                        l1GasUsed: bigint | null;
                        l1Fee: bigint | null;
                        l1FeeScalar: number | null;
                    };
                    type: "transactionReceipt";
                };
            }>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 1442;
                readonly name: "Polygon zkEVM Testnet";
                readonly network: "polygon-zkevm-testnet";
                readonly nativeCurrency: {
                    readonly name: "Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.public.zkevm-test.net"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.public.zkevm-test.net"];
                    };
                };
                readonly blockExplorers: {
                    readonly blockscout: {
                        readonly name: "Blockscout";
                        readonly url: "https://explorer.public.zkevm-test.net";
                    };
                    readonly default: {
                        readonly name: "PolygonScan";
                        readonly url: "https://testnet-zkevm.polygonscan.com";
                    };
                };
                readonly testnet: true;
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 525686;
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 421613;
                readonly name: "Arbitrum Goerli";
                readonly network: "arbitrum-goerli";
                readonly nativeCurrency: {
                    readonly name: "Arbitrum Goerli Ether";
                    readonly symbol: "ETH";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly alchemy: {
                        readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                        readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                    };
                    readonly infura: {
                        readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                        readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                    };
                    readonly default: {
                        readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                    };
                };
                readonly blockExplorers: {
                    readonly etherscan: {
                        readonly name: "Arbiscan";
                        readonly url: "https://goerli.arbiscan.io";
                    };
                    readonly default: {
                        readonly name: "Arbiscan";
                        readonly url: "https://goerli.arbiscan.io";
                    };
                };
                readonly contracts: {
                    readonly multicall3: {
                        readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                        readonly blockCreated: 88114;
                    };
                };
                readonly testnet: true;
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        } | {
            NETWORK: import("viem/_types/types/utils").Assign<{
                readonly id: 123;
                readonly name: "Fuse Sparknet";
                readonly network: "fuse";
                readonly nativeCurrency: {
                    readonly name: "Spark";
                    readonly symbol: "SPARK";
                    readonly decimals: 18;
                };
                readonly rpcUrls: {
                    readonly default: {
                        readonly http: readonly ["https://rpc.fusespark.io"];
                    };
                    readonly public: {
                        readonly http: readonly ["https://rpc.fusespark.io"];
                    };
                };
                readonly blockExplorers: {
                    readonly default: {
                        readonly name: "Sparkent Explorer";
                        readonly url: "https://explorer.fusespark.io";
                    };
                };
            }, import("viem/_types/types/chain").ChainConfig<undefined>>;
            API_BASE_URL: string;
            EPNS_COMMUNICATOR_CONTRACT: string;
        };
    };
};
export declare const ALPHA_FEATURE_CONFIG: {
    STABLE: {
        feature: string[];
    };
    ALPHA: {
        feature: string[];
    };
};
