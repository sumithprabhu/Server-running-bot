"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requests = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../chat/helpers");
const axiosUtil_1 = require("../utils/axiosUtil");
/**
 * The first time an address wants to send a message to another peer, the address sends an intent request. This first message shall not land in this peer Inbox but in its Request box.
 * This function will return all the chats that landed on the address' Request box. The user can then approve the request or ignore it for now.
 */
const requests = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { account, pgpPrivateKey, env = constants_1.default.ENV.PROD, toDecrypt = false, page = 1, limit = 10, } = options || {};
    const user = yield (0, helpers_2.getUserDID)(account, env);
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const apiEndpoint = `${API_BASE_URL}/v1/spaces/users/${user}/requests?page=${page}&limit=${limit}`;
    try {
        if (!(0, helpers_1.isValidETHAddress)(user)) {
            throw new Error(`Invalid address!`);
        }
        const response = yield (0, axiosUtil_1.axiosGet)(apiEndpoint);
        const requests = response.data.requests;
        const Feeds = yield (0, helpers_2.getSpaceInboxLists)({
            lists: requests,
            user,
            toDecrypt,
            pgpPrivateKey,
            env,
        });
        return Feeds;
    }
    catch (err) {
        console.error(`[Push SDK] - API ${exports.requests.name}: `, err);
        throw Error(`[Push SDK] - API ${exports.requests.name}: ${err}`);
    }
});
exports.requests = requests;
//# sourceMappingURL=requests.js.map