"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.update = void 0;
const tslib_1 = require("tslib");
const types_1 = require("../types");
const helpers_1 = require("./../chat/helpers");
const updateGroup_1 = require("../chat/updateGroup");
const get_1 = require("./get");
function update(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { spaceName, spaceImage, spaceDescription, scheduleAt, scheduleEnd, meta, } = options || {};
        try {
            const space = yield (0, get_1.get)({
                spaceId: this.spaceSpecificData.spaceId,
                env: this.env,
            });
            const convertedMembers = (0, helpers_1.getSpacesMembersList)(space.members, space.pendingMembers);
            const convertedAdmins = (0, helpers_1.getSpaceAdminsList)(space.members, space.pendingMembers);
            if (space.status === types_1.ChatStatus.ACTIVE && scheduleAt) {
                throw new Error('Unable change the start date/time of an active space');
            }
            if (space.status === types_1.ChatStatus.ENDED && scheduleEnd) {
                throw new Error('Unable change the end date/time of an ended space');
            }
            const group = yield (0, updateGroup_1.updateGroup)({
                chatId: this.spaceSpecificData.spaceId,
                groupName: spaceName ? spaceName : space.spaceName,
                groupImage: spaceImage ? spaceImage : space.spaceImage,
                groupDescription: spaceDescription
                    ? spaceDescription
                    : space.spaceDescription,
                members: convertedMembers,
                admins: convertedAdmins,
                signer: this.signer,
                env: this.env,
                pgpPrivateKey: this.pgpPrivateKey,
                scheduleAt: scheduleAt ? scheduleAt : space.scheduleAt,
                scheduleEnd: scheduleEnd ? scheduleEnd : space.scheduleEnd,
                meta: meta ? meta : space.meta,
            });
            // update space specific data
            this.setSpaceSpecificData(() => (Object.assign(Object.assign({}, (0, helpers_1.groupDtoToSpaceDto)(group)), { liveSpaceData: this.spaceSpecificData.liveSpaceData })));
        }
        catch (err) {
            console.error(`[Push SDK] - API  - Error - API ${update.name} -:  `, err);
            throw Error(`[Push SDK] - API  - Error - API ${update.name} -: ${err}`);
        }
    });
}
exports.update = update;
//# sourceMappingURL=update.js.map