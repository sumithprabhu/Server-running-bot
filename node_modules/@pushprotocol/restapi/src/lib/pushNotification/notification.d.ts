import { ENV } from '../constants';
import { SignerType } from '../types';
import { SubscribeUnsubscribeOptions, SubscriptionOptions, FeedType, FeedsOptions } from './PushNotificationTypes';
import { PushNotificationBaseClass } from './pushNotificationBase';
export declare const FEED_MAP: {
    INBOX: boolean;
    SPAM: boolean;
};
export declare class Notification extends PushNotificationBaseClass {
    constructor(signer?: SignerType, env?: ENV, account?: string);
    /**
     * @description - Fetches feeds and spam feeds for a specific user
     * @param {enums} spam - indicates if its a spam or not. `INBOX` for non-spam and `SPAM` for spam. default `INBOX`
     * @param {string} [options.user] - user address, defaults to address from signer
     * @param {number} [options.page] -  page number. default is set to Constants.PAGINATION.INITIAL_PAGE
     * @param {number} [options.limit] - number of feeds per page. default is set to Constants.PAGINATION.LIMIT
     * @param {boolean} [options.raw] - indicates if the response should be raw or formatted. defaults is set to false
     * @returns feeds for a specific address
     */
    list: (spam?: `${FeedType}`, options?: FeedsOptions) => Promise<any>;
    subscriptions: (options?: SubscriptionOptions) => Promise<any>;
    /**
     * Subscribes a user to a channel
     * @param {string} channel - channel address in caip format
     * @param {function} [options.onSuccess] - callback function when a user successfully subscribes to a channel
     * @param {function} [options.onError] - callback function incase a user was not able to subscribe to a channel
     * @returns Subscribe status object
     */
    subscribe: (channel: string, options?: SubscribeUnsubscribeOptions) => Promise<{
        status: any;
        message: string;
    }>;
    /**
     * Unsubscribes a user to a channel
     * @param {string} channel - channel address in caip format
     * @param {function} [options.onSuccess] - callback function when a user successfully unsubscribes to a channel
     * @param {function} [options.onError] - callback function incase a user was not able to unsubscribe to a channel
     * @returns Unsubscribe status object
     */
    unsubscribe: (channel: string, options?: SubscribeUnsubscribeOptions) => Promise<Error | {
        status: any;
        message: string;
    }>;
}
