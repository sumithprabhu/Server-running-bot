"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateMessageObj = void 0;
const Joi = require("joi");
const messageTypes_1 = require("../types/messageTypes");
const constants_1 = require("../constants");
const extractValidValues = (obj) => {
    const validValues = [];
    for (const key in obj) {
        if (typeof obj[key] === 'string') {
            validValues.push(obj[key]);
        }
        else if (typeof obj[key] === 'object') {
            validValues.push(...extractValidValues(obj[key]));
        }
    }
    return validValues;
};
const messageObjSchema = Joi.object({
    content: Joi.string().required().allow(''),
});
const metaMessageObjSchema = Joi.object({
    content: Joi.string()
        .valid(...Object.values(extractValidValues(messageTypes_1.CHAT.META)))
        .required(),
    info: Joi.object({
        affected: Joi.array().items(Joi.string()).required(),
        arbitrary: Joi.object().pattern(Joi.string(), Joi.any()),
    }).required(),
});
const reationMessageObjSchema = Joi.object({
    content: Joi.string()
        .valid(...Object.values(extractValidValues(messageTypes_1.CHAT.REACTION)))
        .required(),
    reference: Joi.string().required(),
});
const receiptMessageObjSchema = Joi.object({
    content: Joi.string()
        .valid(...Object.values(extractValidValues(messageTypes_1.CHAT.RECEIPT)))
        .required(),
    reference: Joi.string().required(),
});
const userActivityMessageObjSchema = Joi.object({
    content: Joi.string()
        .valid(...Object.values(extractValidValues(messageTypes_1.CHAT.UA)))
        .required(),
    info: Joi.object({
        affected: Joi.array().items(Joi.string()).required(),
        arbitrary: Joi.object().pattern(Joi.string(), Joi.any()),
    }).required(),
});
const intentMessageObjSchema = Joi.object({
    content: Joi.string().valid(...Object.values(extractValidValues(messageTypes_1.CHAT.INTENT))),
});
const replyMessageObjSchema = Joi.object({
    content: Joi.object({
        messageType: Joi.string()
            .valid(...Object.values([
            constants_1.MessageType.TEXT,
            constants_1.MessageType.IMAGE,
            constants_1.MessageType.AUDIO,
            constants_1.MessageType.VIDEO,
            constants_1.MessageType.FILE,
            constants_1.MessageType.MEDIA_EMBED,
        ]))
            .required(),
        messageObj: Joi.object({
            content: Joi.string().required(), // Change the validation as needed
        }).required(),
    }).required(),
    reference: Joi.string().required(),
});
const compositeMessageObjSchema = Joi.object({
    content: Joi.array()
        .items(Joi.object({
        messageType: Joi.string()
            .valid(...Object.values([
            constants_1.MessageType.TEXT,
            constants_1.MessageType.IMAGE,
            constants_1.MessageType.AUDIO,
            constants_1.MessageType.VIDEO,
            constants_1.MessageType.FILE,
            constants_1.MessageType.MEDIA_EMBED,
        ]))
            .required(),
        messageObj: Joi.object({
            content: Joi.string().required(),
        }).required(),
    }))
        .required(),
});
const validateMessageObj = (messageObj, messageType) => {
    let error = undefined;
    switch (messageType) {
        case constants_1.MessageType.TEXT:
        case constants_1.MessageType.IMAGE:
        case constants_1.MessageType.VIDEO:
        case constants_1.MessageType.AUDIO:
        case constants_1.MessageType.FILE:
        case constants_1.MessageType.MEDIA_EMBED:
        case constants_1.MessageType.GIF: {
            error = messageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.META: {
            error = metaMessageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.REACTION: {
            error = reationMessageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.RECEIPT: {
            error = receiptMessageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.USER_ACTIVITY: {
            error = userActivityMessageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.INTENT: {
            error = intentMessageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.REPLY: {
            error = replyMessageObjSchema.validate(messageObj).error;
            break;
        }
        case constants_1.MessageType.COMPOSITE: {
            error = compositeMessageObjSchema.validate(messageObj).error;
            break;
        }
        default: {
            throw new Error('Invalid MessageType');
        }
    }
    if (error) {
        throw new Error(`Unable to parse this messageType. Please ensure 'messageObj' is properly defined.`);
    }
};
exports.validateMessageObj = validateMessageObj;
//# sourceMappingURL=messageObject.js.map