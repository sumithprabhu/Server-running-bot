"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAdmins = void 0;
const tslib_1 = require("tslib");
const config_1 = require("../config");
const constants_1 = require("../constants");
const updateGroupMembers_1 = require("./updateGroupMembers");
const addAdmins = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { chatId, admins, account = null, signer = null, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, overrideSecretKeyGeneration = !config_1.ALPHA_FEATURE_CONFIG[constants_1.PACKAGE_BUILD].feature.includes(constants_1.default.ALPHA_FEATURES.SCALABILITY_V2), } = options || {};
    try {
        if (account == null && signer == null) {
            throw new Error(`At least one from account or signer is necessary!`);
        }
        if (!admins || admins.length === 0) {
            throw new Error('Admin address array cannot be empty!');
        }
        const upsertPayload = {
            members: [],
            admins: admins,
        };
        const groupMemberUpdateOptions = {
            chatId: chatId,
            upsert: upsertPayload,
            remove: [],
            account: account,
            signer: signer,
            pgpPrivateKey: pgpPrivateKey,
            env: env,
            overrideSecretKeyGeneration,
        };
        return yield (0, updateGroupMembers_1.updateGroupMembers)(groupMemberUpdateOptions);
    }
    catch (err) {
        console.error(`[Push SDK] - API  - Error - API ${exports.addAdmins.name} -:  `, err);
        throw Error(`[Push SDK] - API  - Error - API ${exports.addAdmins.name} -: ${err}`);
    }
});
exports.addAdmins = addAdmins;
//# sourceMappingURL=addAdmins.js.map