"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reject = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const CryptoJS = require("crypto-js");
const axiosUtil_1 = require("../utils/axiosUtil");
/**
 * Reject Chat Request
 */
const reject = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { account = null, signer = null, senderAddress, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    if (account == null && signer == null) {
        throw new Error(`At least one from account or signer is necessary!`);
    }
    const wallet = (0, helpers_2.getWallet)({ account, signer });
    const address = yield (0, helpers_2.getAccountAddress)(wallet);
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const apiEndpoint = `${API_BASE_URL}/v1/chat/request/reject`;
    let isGroup = true;
    if ((0, helpers_1.isValidETHAddress)(senderAddress)) {
        isGroup = false;
    }
    const connectedUser = yield (0, helpers_2.getConnectedUserV2)(wallet, pgpPrivateKey, env);
    let fromDID = yield (0, helpers_2.getUserDID)(senderAddress, env);
    let toDID = yield (0, helpers_2.getUserDID)(address, env);
    if (isGroup) {
        fromDID = yield (0, helpers_2.getUserDID)(address, env);
        toDID = yield (0, helpers_2.getUserDID)(senderAddress, env);
    }
    const bodyToBeHashed = {
        fromDID,
        toDID,
    };
    const hash = CryptoJS.SHA256(JSON.stringify(bodyToBeHashed)).toString();
    const signature = yield (0, helpers_2.sign)({
        message: hash,
        signingKey: connectedUser.privateKey,
    });
    const body = (0, helpers_2.rejectRequestPayload)(fromDID, toDID, 'pgp', signature);
    return (0, axiosUtil_1.axiosPut)(apiEndpoint, body)
        .then((response) => {
        return response.data;
    })
        .catch((err) => {
        console.error(`[Push SDK] - API ${exports.reject.name}: `, err);
        throw Error(`[Push SDK] - API ${exports.reject.name}: ${err}`);
    });
});
exports.reject = reject;
//# sourceMappingURL=rejectRequest.js.map