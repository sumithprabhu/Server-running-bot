import { IConnectedUser, GroupDTO, SpaceDTO, ChatStatus, Rules, SpaceRules, GroupAccess, SpaceAccess, GroupInfoDTO } from '../../types';
import { ENV } from '../../constants';
import { IPGPHelper } from './pgp';
import { MessageObj } from '../../types/messageTypes';
export interface ISendMessagePayload {
    fromDID: string;
    toDID: string;
    fromCAIP10: string;
    toCAIP10: string;
    messageObj: MessageObj | string;
    messageType: string;
    encType: string;
    encryptedSecret: string | null | undefined;
    sessionKey: string | null | undefined;
    verificationProof?: string;
    /**
     * @deprecated - Use messageObj instead
     */
    messageContent: string;
    /**
     * @deprecated - Use messageObj instead
     */
    signature: string | null | undefined;
    /**
     * @deprecated - Use messageObj instead
     */
    sigType: string | null | undefined;
}
export interface IRejectRequestPayload {
    fromDID: string;
    toDID: string;
    verificationProof?: string | null | undefined;
}
export interface ICreateGroupRequestPayload {
    groupName: string;
    groupDescription?: string | null;
    members: Array<string>;
    groupImage?: string | null;
    admins: Array<string>;
    isPublic: boolean;
    contractAddressNFT?: string;
    numberOfNFTs?: number;
    contractAddressERC20?: string;
    numberOfERC20?: number;
    groupCreator: string;
    verificationProof: string;
    meta?: string;
    rules?: Rules | null;
}
export interface IUpdateGroupRequestPayload {
    groupName: string;
    groupImage?: string | null;
    members: Array<string>;
    admins: Array<string>;
    address: string;
    verificationProof: string;
    encryptedSecret: string | null;
}
export declare const sendMessagePayload: (receiverAddress: string, senderCreatedUser: IConnectedUser, messageObj: MessageObj, messageContent: string, messageType: string, group: GroupInfoDTO | null, env: ENV) => Promise<ISendMessagePayload>;
export declare const sendMessagePayloadCore: (receiverAddress: string, senderCreatedUser: IConnectedUser, messageObj: MessageObj | string, messageContent: string, messageType: string, group: GroupInfoDTO | null, env: ENV, pgpHelper: IPGPHelper) => Promise<ISendMessagePayload>;
export declare const rejectRequestPayload: (fromDID: string, toDID: string, sigType: string, signature: string) => IRejectRequestPayload;
export declare const createGroupPayload: (groupName: string, members: Array<string>, admins: Array<string>, isPublic: boolean, groupCreator: string, verificationProof: string, groupDescription?: string | null, groupImage?: string | null, contractAddressNFT?: string, numberOfNFTs?: number, contractAddressERC20?: string, numberOfERC20?: number, meta?: string, groupType?: string | null, scheduleAt?: Date | null, scheduleEnd?: Date | null, rules?: Rules | null) => ICreateGroupRequestPayload;
export declare const groupDtoToSpaceDto: (groupDto: GroupDTO) => SpaceDTO;
export declare const groupDtoToSpaceDtoV2: (groupDto: GroupInfoDTO, env?: ENV) => Promise<SpaceDTO>;
export declare const convertSpaceRulesToRules: (spaceRules: SpaceRules) => Rules;
export declare const convertRulesToSpaceRules: (rules: Rules) => SpaceRules;
export declare const groupAccessToSpaceAccess: (group: GroupAccess) => SpaceAccess;
export declare const updateGroupPayload: (groupName: string, members: Array<string>, admins: Array<string>, address: string, verificationProof: string, encryptedSecret: string | null, groupDescription?: string | null, groupImage?: string | null, scheduleAt?: Date | null, scheduleEnd?: Date | null, status?: ChatStatus | null, meta?: string | null, rules?: Rules | null) => IUpdateGroupRequestPayload;
export declare const getAdminsList: (members: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[]) => Array<string>;
export declare const getSpaceAdminsList: (members: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[]) => Array<string>;
export declare const convertToWalletAddressList: (memberList: {
    wallet: string;
}[]) => string[];
export declare const getMembersList: (members: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[]) => Array<string>;
export declare const getSpacesMembersList: (members: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[]) => Array<string>;
