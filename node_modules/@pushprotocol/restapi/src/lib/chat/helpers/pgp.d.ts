interface IPGPHelper {
    generateKeyPair(): Promise<{
        privateKeyArmored: string;
        publicKeyArmored: string;
    }>;
    sign({ message, signingKey }: {
        message: string;
        signingKey: string;
    }): Promise<string>;
    pgpEncrypt({ plainText, keys }: {
        plainText: string;
        keys: Array<string>;
    }): Promise<string>;
    pgpDecrypt({ cipherText, toPrivateKeyArmored }: {
        cipherText: any;
        toPrivateKeyArmored: string;
    }): Promise<string>;
    verifySignature({ messageContent, signatureArmored, publicKeyArmored, }: {
        messageContent: string;
        signatureArmored: string;
        publicKeyArmored: string;
    }): Promise<void>;
}
declare const PGPHelper: IPGPHelper;
export { IPGPHelper, PGPHelper };
export declare const generateKeyPair: () => Promise<{
    privateKeyArmored: string;
    publicKeyArmored: string;
}>;
export declare const pgpEncrypt: ({ plainText, keys, }: {
    plainText: string;
    keys: Array<string>;
}) => Promise<string>;
export declare const sign: ({ message, signingKey }: {
    message: string;
    signingKey: string;
}) => Promise<string>;
export declare const verifySignature: ({ messageContent, signatureArmored, publicKeyArmored, }: {
    messageContent: string;
    signatureArmored: string;
    publicKeyArmored: string;
}) => Promise<void>;
export declare const pgpDecrypt: ({ cipherText, toPrivateKeyArmored }: {
    cipherText: any;
    toPrivateKeyArmored: string;
}) => Promise<string>;
