"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessagesService = exports.getConversationHashService = exports.authUpdateUserService = exports.createUserService = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("../../constants");
const helpers_1 = require("../../helpers");
const crypto_1 = require("./crypto");
const populateIUser_1 = require("../../utils/populateIUser");
const axiosUtil_1 = require("../../utils/axiosUtil");
const createUserService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { wallet, publicKey = '', encryptedPrivateKey = '', env = constants_1.default.ENV.PROD, origin, } = options || {};
    let { user } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v2/users/`;
    if ((0, helpers_1.isValidCAIP10NFTAddress)(user)) {
        const epoch = Math.floor(Date.now() / 1000);
        if (user.split(':').length !== 6) {
            user = `${user}:${epoch}`;
        }
    }
    const data = {
        caip10: (0, helpers_1.walletToPCAIP10)(user),
        did: (0, helpers_1.walletToPCAIP10)(user),
        publicKey,
        encryptedPrivateKey
    };
    const hash = (0, helpers_1.generateHash)(data);
    const signatureObj = yield (0, crypto_1.getEip191Signature)(wallet, hash, 'v2');
    const body = Object.assign(Object.assign(Object.assign({}, data), { origin: origin }), signatureObj);
    return (0, axiosUtil_1.axiosPost)(requestUrl, body)
        .then((response) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (response.data)
            response.data.publicKey = yield (0, helpers_1.verifyProfileKeys)(response.data.encryptedPrivateKey, response.data.publicKey, response.data.did, response.data.wallets, response.data.verificationProof);
        return (0, populateIUser_1.populateDeprecatedUser)(response.data);
    }))
        .catch((err) => {
        throw Error(`[Push SDK] - API ${requestUrl}: ${err}`);
    });
});
exports.createUserService = createUserService;
const authUpdateUserService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { user, wallet, publicKey = '', encryptedPrivateKey = '', env = constants_1.default.ENV.PROD, } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v2/users/${(0, helpers_1.walletToPCAIP10)(user)}/auth`;
    const data = {
        caip10: (0, helpers_1.walletToPCAIP10)(user),
        did: (0, helpers_1.walletToPCAIP10)(user),
        publicKey,
        encryptedPrivateKey,
    };
    const hash = (0, helpers_1.generateHash)(data);
    const signatureObj = yield (0, crypto_1.getEip191Signature)(wallet, hash, 'v2');
    // Exclude the "did" property from the "body" object
    const _a = Object.assign(Object.assign({}, data), signatureObj), { did } = _a, body = tslib_1.__rest(_a, ["did"]);
    return (0, axiosUtil_1.axiosPut)(requestUrl, body)
        .then((response) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        if (response.data)
            response.data.publicKey = yield (0, helpers_1.verifyProfileKeys)(response.data.encryptedPrivateKey, response.data.publicKey, response.data.did, response.data.wallets, response.data.verificationProof);
        return (0, populateIUser_1.populateDeprecatedUser)(response.data);
    }))
        .catch((err) => {
        throw Error(`[Push SDK] - API ${requestUrl}: ${err}`);
    });
});
exports.authUpdateUserService = authUpdateUserService;
const getConversationHashService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { conversationId, account, env = constants_1.default.ENV.PROD } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v1/chat/users/${(0, helpers_1.walletToPCAIP10)(account)}/conversations/${conversationId}/hash`;
    return (0, axiosUtil_1.axiosGet)(requestUrl)
        .then((response) => {
        return response.data;
    })
        .catch((err) => {
        throw new Error(err);
    });
});
exports.getConversationHashService = getConversationHashService;
const getMessagesService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { threadhash, limit, env = constants_1.default.ENV.PROD } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const apiEndpoint = `${API_BASE_URL}/v1/chat/conversationhash/${threadhash}`;
    const queryObj = {
        fetchLimit: limit,
    };
    const requestUrl = `${apiEndpoint}?${(0, helpers_1.getQueryParams)(queryObj)}`;
    return (0, axiosUtil_1.axiosGet)(requestUrl)
        .then((response) => {
        return response.data;
    })
        .catch((err) => {
        throw new Error(err);
    });
});
exports.getMessagesService = getMessagesService;
//# sourceMappingURL=service.js.map