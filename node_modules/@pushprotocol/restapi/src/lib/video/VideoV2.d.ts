import { ENV } from '../constants';
import { VideoNotificationRules, VideoPeerInfo } from '../types';
import { Video as VideoV1 } from './Video';
/**
 * VideoV2 class
 */
export declare class VideoV2 {
    private account;
    private decryptedPgpPvtKey;
    private env;
    private videoInstance;
    private peerInfos;
    /**
     * VideoV2 constructor
     * @param {object} params - The constructor parameters
     * @param {VideoV1} params.videoV1Instance - The VideoV1 instance
     * @param {string} params.account - The account
     * @param {string} params.decryptedPgpPvtKey - The decrypted PGP private key
     * @param {ENV} params.env - The environment
     */
    constructor({ videoV1Instance, account, decryptedPgpPvtKey, env, peerInfos }: {
        videoV1Instance: VideoV1;
        account: string;
        decryptedPgpPvtKey: string;
        env: ENV;
        peerInfos: {
            [key: string]: VideoPeerInfo;
        };
    });
    /**
     * Request a video call
     * @param {string[]} recipients - The recipients of the video call
     * @param {object} options - The options for the video call
     * @param {object} options.rules - The rules for the video call
     * @param {object} options.rules.access - The access rules for the video call
     * @param {string} options.rules.access.type - The type of the video call
     * @param {object} options.rules.access.data - The data for the video call
     * @param {string} options.rules.access.data.chatId - The chat ID for the video call
     */
    request(recipients: string[], options?: {
        rules: VideoNotificationRules;
    }): Promise<void>;
    /**
     * Approve a video call
     * @param {string} [address] - The address of the peer from which the video call is to be approved
     */
    approve(address?: string): Promise<void>;
    /**
     * Deny a video call
     * @param {string} [address] - The address of the peer from which the video call is to be denied
     */
    deny(address?: string): Promise<void>;
    /**
     * Disconnect from a video call
     */
    disconnect(): Promise<void>;
    /**
     * Enable or disable config properties (video, audio)
     * @param {object} params - The parameters
     * @param {boolean} params.video - The video state
     * @param {boolean} params.audio - The audio state
     */
    config({ video, audio }: {
        video?: boolean;
        audio?: boolean;
    }): void;
}
