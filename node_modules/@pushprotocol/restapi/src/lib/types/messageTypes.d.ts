/**
 * This file defines the type for message property for a Push Chat message
 */
import { MessageType } from '../constants';
export declare const CHAT: {
    META: {
        GROUP: {
            CREATE: string;
            MEMBER: {
                ADD: string;
                REMOVE: string;
                PRIVILEGE: string;
            };
            ADMIN: {
                PRVILEGE: string;
            };
            UPDATE: string;
            PROFILE: {
                UPDATE: string;
            };
            META: {
                UPDATE: string;
            };
            USER: {
                INTERACTION: string;
            };
        };
        SPACE: {
            CREATE: string;
            LISTENER: {
                ADD: string;
                REMOVE: string;
                PRVILEGE: string;
            };
            SPEAKER: {
                PRVILEGE: string;
            };
            COHOST: {
                PRVILEGE: string;
            };
        };
    };
    REACTION: {
        THUMBSUP: string;
        THUMBSDOWN: string;
        HEART: string;
        CLAP: string;
        LAUGH: string;
        SAD: string;
        ANGRY: string;
        SUPRISE: string;
        FIRE: string;
    };
    RECEIPT: {
        READ: string;
    };
    UA: {
        LISTENER: {
            JOIN: string;
            LEAVE: string;
            MICREQUEST: string;
        };
        SPEAKER: {
            MIC_ON: string;
            MIC_OFF: string;
        };
    };
    INTENT: {
        ACCEPT: string;
        REJECT: string;
        JOIN: string;
        LEAVE: string;
    };
};
interface BaseMessage<T> {
    type?: T;
    content: string;
}
export interface InfoMessage extends BaseMessage<`${MessageType.META}` | `${MessageType.USER_ACTIVITY}`> {
    info: {
        affected: string[];
        arbitrary?: {
            [key: string]: any;
        };
    };
}
interface ReferenceMessage extends BaseMessage<`${MessageType.REACTION}` | `${MessageType.RECEIPT}`> {
    reference: string;
}
interface ReplyMessage {
    type: `${MessageType.REPLY}`;
    /** Only Few BaseMessageTypes are allowed, this can be changed in the future */
    content: {
        type: string;
        content: string;
    };
    reference: string;
}
interface CompositeMessage {
    type: `${MessageType.COMPOSITE}`;
    /** Only Few BaseMessageTypes are allowed, this can be changed in the future */
    content: {
        type: string;
        content: string;
    }[];
}
type BaseMessageTypes = `${MessageType.TEXT}` | `${MessageType.IMAGE}` | `${MessageType.VIDEO}` | `${MessageType.AUDIO}` | `${MessageType.FILE}` | `${MessageType.GIF}` | `${MessageType.MEDIA_EMBED}` | `${MessageType.INTENT}`;
export type Message = BaseMessage<BaseMessageTypes> | InfoMessage | ReferenceMessage | ReplyMessage | CompositeMessage;
/**
 * @deprecated
 */
export type MessageObj = Omit<BaseMessage<BaseMessageTypes>, 'type'> | Omit<InfoMessage, 'type'> | Omit<ReferenceMessage, 'type'> | Omit<ReplyMessage, 'type'> | Omit<CompositeMessage, 'type'>;
export {};
