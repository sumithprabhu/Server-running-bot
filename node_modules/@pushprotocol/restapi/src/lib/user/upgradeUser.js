"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgrade = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../chat/helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../helpers");
const auth_updateUser_1 = require("./auth.updateUser");
const getUser_1 = require("./getUser");
const progressHook_1 = require("../progressHook");
/**
 * Upgrades the Push Profile keys from current version to recommended version
 * @param options
 * @returns
 */
const upgrade = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { env = constants_1.default.ENV.PROD, account = null, signer, additionalMeta, progressHook, } = options || {};
    try {
        const wallet = (0, helpers_1.getWallet)({ account, signer });
        const address = yield (0, helpers_1.getAccountAddress)(wallet);
        if (!(0, helpers_2.isValidETHAddress)(address)) {
            throw new Error(`Invalid address!`);
        }
        const user = yield (0, getUser_1.get)({ account: address, env: env });
        if (!user || !user.encryptedPrivateKey) {
            throw new Error('User Not Found!');
        }
        const recommendedPgpEncryptionVersion = constants_1.default.ENCRYPTION_TYPE.PGP_V3;
        const { version } = JSON.parse(user.encryptedPrivateKey);
        if (version === recommendedPgpEncryptionVersion ||
            version === constants_1.default.ENCRYPTION_TYPE.NFTPGP_V1) {
            return user;
        }
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-UPGRADE-02']);
        const pgpPrivateKey = yield (0, helpers_2.decryptPGPKey)({
            encryptedPGPPrivateKey: user.encryptedPrivateKey,
            signer: signer,
            env,
            toUpgrade: false,
            additionalMeta,
        });
        const upgradedUser = yield (0, auth_updateUser_1.authUpdate)({
            pgpPrivateKey,
            pgpEncryptionVersion: recommendedPgpEncryptionVersion,
            signer,
            pgpPublicKey: user.publicKey,
            account: user.did,
            env,
            additionalMeta: additionalMeta,
            progressHook: progressHook,
        });
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-UPGRADE-05']);
        return upgradedUser;
    }
    catch (err) {
        // Report Progress
        const errorProgressHook = progressHook_1.default['PUSH-ERROR-00'];
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(errorProgressHook(exports.upgrade.name, err));
        throw Error(`[Push SDK] - API - Error - API ${exports.upgrade.name} -: ${err}`);
    }
});
exports.upgrade = upgrade;
//# sourceMappingURL=upgradeUser.js.map