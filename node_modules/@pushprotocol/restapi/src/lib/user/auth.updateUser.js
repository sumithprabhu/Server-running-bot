"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authUpdate = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../chat/helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../helpers");
const progressHook_1 = require("../progressHook");
const getUser_1 = require("./getUser");
//used only in progressHook to abstract encryption algotrithms
var ENCRYPTION_TYPE_VERSION;
(function (ENCRYPTION_TYPE_VERSION) {
    ENCRYPTION_TYPE_VERSION["x25519-xsalsa20-poly1305"] = "PGP_V1";
    ENCRYPTION_TYPE_VERSION["aes256GcmHkdfSha256"] = "PGP_V2";
    ENCRYPTION_TYPE_VERSION["eip191-aes256-gcm-hkdf-sha256"] = "PGP_V3";
    ENCRYPTION_TYPE_VERSION["pgpv1:nft"] = "NFTPGP_V1";
})(ENCRYPTION_TYPE_VERSION || (ENCRYPTION_TYPE_VERSION = {}));
/**
 * Updation of encryption keys of a Push Profile to a specific version
 */
const authUpdate = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { pgpPrivateKey, pgpEncryptionVersion, signer, pgpPublicKey, account = null, env = constants_1.default.ENV.PROD, additionalMeta, progressHook, } = options || {};
    try {
        const wallet = (0, helpers_1.getWallet)({ account, signer });
        const address = yield (0, helpers_1.getAccountAddress)(wallet);
        const updatingCreds = pgpEncryptionVersion === constants_1.default.ENCRYPTION_TYPE.NFTPGP_V1
            ? true
            : false;
        if (!(0, helpers_2.isValidETHAddress)(address)) {
            throw new Error(`Invalid address!`);
        }
        const caip10 = (0, helpers_2.walletToPCAIP10)(address);
        const user = yield (0, getUser_1.get)({ account: caip10, env: env });
        if (!user || !user.encryptedPrivateKey) {
            throw new Error('User not Found!');
        }
        // Report Progress
        updatingCreds
            ? progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-AUTH-UPDATE-05'])
            : progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-AUTH-UPDATE-01'](ENCRYPTION_TYPE_VERSION[pgpEncryptionVersion]));
        const signedPublicKey = yield (0, helpers_2.preparePGPPublicKey)(pgpEncryptionVersion, pgpPublicKey, wallet);
        // Report Progress
        updatingCreds
            ? progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-AUTH-UPDATE-06'])
            : progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-AUTH-UPDATE-02'](ENCRYPTION_TYPE_VERSION[pgpEncryptionVersion]));
        const encryptedPgpPrivateKey = yield (0, helpers_2.encryptPGPKey)(pgpEncryptionVersion, pgpPrivateKey, wallet, additionalMeta);
        if (pgpEncryptionVersion === constants_1.ENCRYPTION_TYPE.NFTPGP_V1) {
            const encryptedPassword = yield (0, helpers_2.encryptPGPKey)(constants_1.ENCRYPTION_TYPE.PGP_V3, (_a = additionalMeta === null || additionalMeta === void 0 ? void 0 : additionalMeta.NFTPGP_V1) === null || _a === void 0 ? void 0 : _a.password, wallet, additionalMeta);
            encryptedPgpPrivateKey.encryptedPassword = encryptedPassword;
        }
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-AUTH-UPDATE-03']);
        const body = {
            user: user.did,
            wallet,
            publicKey: signedPublicKey,
            encryptedPrivateKey: JSON.stringify(encryptedPgpPrivateKey),
            env,
        };
        const updatedUser = yield (0, helpers_1.authUpdateUserService)(body);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-AUTH-UPDATE-04']);
        return updatedUser;
    }
    catch (err) {
        // Report Progress
        const errorProgressHook = progressHook_1.default['PUSH-ERROR-00'];
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(errorProgressHook(exports.authUpdate.name, err));
        throw Error(`[Push SDK] - API - Error - API ${exports.authUpdate.name} -: ${err}`);
    }
});
exports.authUpdate = authUpdate;
//# sourceMappingURL=auth.updateUser.js.map