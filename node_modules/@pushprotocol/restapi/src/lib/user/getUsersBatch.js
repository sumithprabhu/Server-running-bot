"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBatch = void 0;
const tslib_1 = require("tslib");
const address_1 = require("../helpers/address");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const populateIUser_1 = require("../utils/populateIUser");
const axiosUtil_1 = require("../utils/axiosUtil");
const getBatch = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { env = constants_1.default.ENV.PROD, userIds } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v2/users/batch`;
    const MAX_USER_IDS_LENGTH = 100;
    if (userIds.length > MAX_USER_IDS_LENGTH) {
        throw new Error(`Too many user IDs. Maximum allowed: ${MAX_USER_IDS_LENGTH}`);
    }
    for (let i = 0; i < userIds.length; i++) {
        if (!(0, address_1.isValidETHAddress)(userIds[i])) {
            throw new Error(`Invalid user address!`);
        }
    }
    const pcaipUserIds = userIds.map(address_1.walletToPCAIP10);
    const requestBody = { userIds: pcaipUserIds };
    return (0, axiosUtil_1.axiosPost)(requestUrl, requestBody)
        .then((response) => {
        response.data.users.forEach((user, index) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            response.data.users[index].publicKey = yield (0, helpers_1.verifyProfileKeys)(user.encryptedPrivateKey, user.publicKey, user.did, user.caip10, user.verificationProof);
            response.data.users[index] = (0, populateIUser_1.populateDeprecatedUser)(response.data.users[index]);
        }));
        return response.data;
    })
        .catch((err) => {
        console.error(`[Push SDK] - API ${requestUrl}: `, err);
        throw Error(`[Push SDK] - API ${requestUrl}: ${err}`);
    });
});
exports.getBatch = getBatch;
//# sourceMappingURL=getUsersBatch.js.map