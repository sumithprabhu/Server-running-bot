"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserCore = exports.create = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../chat/helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../helpers");
const progressHook_1 = require("../progressHook");
const create = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield (0, exports.createUserCore)(options, helpers_1.PGPHelper);
});
exports.create = create;
const createUserCore = (options, pgpHelper) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const passPrefix = '$0Pc'; //password prefix to ensure password validation
    const { env = constants_1.default.ENV.PROD, account = null, signer = null, version = constants_1.default.ENC_TYPE_V3, additionalMeta = {
        NFTPGP_V1: {
            password: passPrefix + (0, helpers_1.generateRandomSecret)(10),
        },
    }, progressHook, origin } = options || {};
    try {
        if (account == null && signer == null) {
            throw new Error(`At least one from account or signer is necessary!`);
        }
        const wallet = (0, helpers_1.getWallet)({ account, signer });
        const address = yield (0, helpers_1.getAccountAddress)(wallet);
        if (!(0, helpers_2.isValidETHAddress)(address)) {
            throw new Error(`Invalid address!`);
        }
        if ((_a = additionalMeta === null || additionalMeta === void 0 ? void 0 : additionalMeta.NFTPGP_V1) === null || _a === void 0 ? void 0 : _a.password) {
            (0, helpers_2.validatePssword)(additionalMeta.NFTPGP_V1.password);
        }
        const caip10 = (0, helpers_2.walletToPCAIP10)(address);
        let encryptionType = version;
        if ((0, helpers_2.isValidCAIP10NFTAddress)(caip10)) {
            // upgrade to v4 (nft encryption)
            encryptionType = constants_1.default.ENC_TYPE_V4;
        }
        else {
            // downgrade to v1
            if (!signer)
                encryptionType = constants_1.default.ENC_TYPE_V1;
        }
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-CREATE-01']);
        const keyPairs = yield pgpHelper.generateKeyPair();
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-CREATE-02']);
        const publicKey = yield (0, helpers_2.preparePGPPublicKey)(encryptionType, keyPairs.publicKeyArmored, wallet);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-CREATE-03']);
        const encryptedPrivateKey = yield (0, helpers_2.encryptPGPKey)(encryptionType, keyPairs.privateKeyArmored, wallet, additionalMeta);
        if (encryptionType === constants_1.default.ENC_TYPE_V4) {
            const encryptedPassword = yield (0, helpers_2.encryptPGPKey)(constants_1.default.ENC_TYPE_V3, (_b = additionalMeta.NFTPGP_V1) === null || _b === void 0 ? void 0 : _b.password, wallet, additionalMeta);
            encryptedPrivateKey.encryptedPassword = encryptedPassword;
        }
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-CREATE-04']);
        const body = {
            user: caip10,
            wallet,
            publicKey: publicKey,
            encryptedPrivateKey: JSON.stringify(encryptedPrivateKey),
            env,
            origin: origin
        };
        const createdUser = yield (0, helpers_1.createUserService)(body);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(progressHook_1.default['PUSH-CREATE-05']);
        createdUser.decryptedPrivateKey = keyPairs.privateKeyArmored;
        return createdUser;
    }
    catch (err) {
        // Report Progress
        const errorProgressHook = progressHook_1.default['PUSH-ERROR-00'];
        progressHook === null || progressHook === void 0 ? void 0 : progressHook(errorProgressHook(exports.create.name, err));
        throw Error(`[Push SDK] - API - Error - API ${exports.create.name} -: ${err}`);
    }
});
exports.createUserCore = createUserCore;
//# sourceMappingURL=createUser.js.map