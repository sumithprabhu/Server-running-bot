'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var asyncToGenerator = require('../../../../dist/asyncToGenerator-32d46645.cjs.prod.js');
var Hls = require('hls.js');
var utils = require('../../../../dist/utils-5554bdd3.cjs.prod.js');
require('core-js/modules/es.regexp.exec.js');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/es.array.includes.js');
require('core-js/modules/es.string.includes.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var Hls__default = /*#__PURE__*/_interopDefault(Hls);

// deprecated! - all errors trigger exponential backoff
// keeping for documentation
//
// errors which trigger an exponential backoff
// const backoffRetryErrors = [
//   // custom error to indicate invalid JWT was provided
//   'Shutting down since this session is not allowed to view this stream',
//   // custom error to indicate stream could not be opened
//   'Stream open failed',
// ] as const;

var VIDEO_HLS_INITIALIZED_ATTRIBUTE = 'data-hls-initialized';
/**
 * Checks if hls.js can play in the browser.
 */
var isHlsSupported = function isHlsSupported() {
  return utils.isClient() ? Hls__default["default"].isSupported() : true;
};

/**
 * Create an hls.js instance and attach to the provided media element.
 */
var createNewHls = function createNewHls(source, element, callbacks, config) {
  // do not attach twice
  if (element.getAttribute(VIDEO_HLS_INITIALIZED_ATTRIBUTE) === 'true') {
    return {
      destroy: function destroy() {
        //
      }
    };
  }
  element.setAttribute(VIDEO_HLS_INITIALIZED_ATTRIBUTE, 'true');
  var hls = new Hls__default["default"](asyncToGenerator._objectSpread2(asyncToGenerator._objectSpread2({
    backBufferLength: 60 * 1.5
  }, config), config !== null && config !== void 0 && config.liveSyncDurationCount ? {
    liveSyncDurationCount: config.liveSyncDurationCount
  } : {
    liveMaxLatencyDurationCount: 7,
    liveSyncDurationCount: 3
  }));
  var onDestroy = function onDestroy() {
    var _hls$destroy, _element$removeAttrib;
    hls === null || hls === void 0 ? void 0 : (_hls$destroy = hls.destroy) === null || _hls$destroy === void 0 ? void 0 : _hls$destroy.call(hls);
    element === null || element === void 0 ? void 0 : (_element$removeAttrib = element.removeAttribute) === null || _element$removeAttrib === void 0 ? void 0 : _element$removeAttrib.call(element, VIDEO_HLS_INITIALIZED_ATTRIBUTE);
  };
  if (element) {
    hls.attachMedia(element);
  }
  hls.on(Hls__default["default"].Events.LEVEL_LOADED, /*#__PURE__*/function () {
    var _ref = asyncToGenerator._asyncToGenerator( /*#__PURE__*/asyncToGenerator._regeneratorRuntime().mark(function _callee(_e, data) {
      var _callbacks$onLive, _callbacks$onDuration;
      var _data$details, live, duration;
      return asyncToGenerator._regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _data$details = data.details, live = _data$details.live, duration = _data$details.totalduration;
              callbacks === null || callbacks === void 0 ? void 0 : (_callbacks$onLive = callbacks.onLive) === null || _callbacks$onLive === void 0 ? void 0 : _callbacks$onLive.call(callbacks, Boolean(live));
              callbacks === null || callbacks === void 0 ? void 0 : (_callbacks$onDuration = callbacks.onDuration) === null || _callbacks$onDuration === void 0 ? void 0 : _callbacks$onDuration.call(callbacks, duration !== null && duration !== void 0 ? duration : 0);
            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  hls.on(Hls__default["default"].Events.MEDIA_ATTACHED, /*#__PURE__*/asyncToGenerator._asyncToGenerator( /*#__PURE__*/asyncToGenerator._regeneratorRuntime().mark(function _callee2() {
    return asyncToGenerator._regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            hls.loadSource(source);
            hls.on(Hls__default["default"].Events.MANIFEST_PARSED, function (_event, _data) {
              var _callbacks$onCanPlay;
              callbacks === null || callbacks === void 0 ? void 0 : (_callbacks$onCanPlay = callbacks.onCanPlay) === null || _callbacks$onCanPlay === void 0 ? void 0 : _callbacks$onCanPlay.call(callbacks);
            });
          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  hls.on(Hls__default["default"].Events.ERROR, /*#__PURE__*/function () {
    var _ref3 = asyncToGenerator._asyncToGenerator( /*#__PURE__*/asyncToGenerator._regeneratorRuntime().mark(function _callee3(_event, data) {
      var _callbacks$onError;
      var details, fatal, isManifestParsingError;
      return asyncToGenerator._regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              details = data.details, fatal = data.fatal;
              isManifestParsingError = Hls__default["default"].ErrorTypes.NETWORK_ERROR && details === 'manifestParsingError';
              if (!(!fatal && !isManifestParsingError)) {
                _context3.next = 4;
                break;
              }
              return _context3.abrupt("return");
            case 4:
              callbacks === null || callbacks === void 0 ? void 0 : (_callbacks$onError = callbacks.onError) === null || _callbacks$onError === void 0 ? void 0 : _callbacks$onError.call(callbacks, data);
              if (!fatal) {
                _context3.next = 17;
                break;
              }
              console.error("Fatal error : ".concat(data.details));
              _context3.t0 = data.type;
              _context3.next = _context3.t0 === Hls__default["default"].ErrorTypes.MEDIA_ERROR ? 10 : _context3.t0 === Hls__default["default"].ErrorTypes.NETWORK_ERROR ? 12 : 14;
              break;
            case 10:
              hls.recoverMediaError();
              return _context3.abrupt("break", 17);
            case 12:
              console.error("A network error occurred: ".concat(data.details));
              return _context3.abrupt("break", 17);
            case 14:
              console.error("An unrecoverable error occurred: ".concat(data.details));
              hls.destroy();
              return _context3.abrupt("break", 17);
            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return function (_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }());
  function updateOffset() {
    var currentDate = Date.now();
    var newDate = hls.playingDate;
    if (newDate && currentDate) {
      var _callbacks$onPlayback;
      callbacks === null || callbacks === void 0 ? void 0 : (_callbacks$onPlayback = callbacks.onPlaybackOffsetUpdated) === null || _callbacks$onPlayback === void 0 ? void 0 : _callbacks$onPlayback.call(callbacks, currentDate - newDate.getTime());
    }
  }
  var updateOffsetInterval = setInterval(updateOffset, 2000);
  return {
    destroy: function destroy() {
      var _clearInterval;
      onDestroy === null || onDestroy === void 0 ? void 0 : onDestroy();
      (_clearInterval = clearInterval) === null || _clearInterval === void 0 ? void 0 : _clearInterval(updateOffsetInterval);
    }
  };
};

exports.VIDEO_HLS_INITIALIZED_ATTRIBUTE = VIDEO_HLS_INITIALIZED_ATTRIBUTE;
exports.createNewHls = createNewHls;
exports.isHlsSupported = isHlsSupported;
