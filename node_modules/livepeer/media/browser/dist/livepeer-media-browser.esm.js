import { createClip, version, createStorage } from '@livepeer/core';
import { DEFAULT_VOLUME_LEVEL, DEFAULT_AUTOHIDE_TIME, createControllerStore, addMediaMetricsToStore } from '@livepeer/core/media';
import { i as isClient, a as isAndroid, b as isIos, c as isMobile } from '../../../dist/utils-11c7a7d0.esm.js';
export { d as canPlayMediaNatively } from '../../../dist/utils-11c7a7d0.esm.js';
import { _ as _arrayLikeToArray, a as _unsupportedIterableToArray, b as _createForOfIteratorHelper } from '../../../dist/createForOfIteratorHelper-231ff6d3.esm.js';
import { _ as _asyncToGenerator, a as _regeneratorRuntime, b as _objectSpread2 } from '../../../dist/asyncToGenerator-663536dc.esm.js';
import 'core-js/modules/es.object.to-string.js';
import 'core-js/modules/es.promise.js';
import 'core-js/modules/es.array.includes.js';
import 'core-js/modules/es.array.reduce.js';
import 'core-js/modules/es.regexp.exec.js';
import 'core-js/modules/es.string.includes.js';

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var methodsList = [
// modern browsers
{
  requestFullscreen: 'requestFullscreen',
  exitFullscreen: 'exitFullscreen',
  fullscreenElement: 'fullscreenElement',
  fullscreenEnabled: 'fullscreenEnabled',
  fullscreenchange: 'fullscreenchange',
  fullscreenerror: 'fullscreenerror'
},
// new WebKit
{
  requestFullscreen: 'webkitRequestFullscreen',
  exitFullscreen: 'webkitExitFullscreen',
  fullscreenElement: 'webkitFullscreenElement',
  fullscreenEnabled: 'webkitFullscreenEnabled',
  fullscreenchange: 'webkitfullscreenchange',
  fullscreenerror: 'webkitfullscreenerror'
},
// old WebKit
{
  requestFullscreen: 'webkitRequestFullScreen',
  exitFullscreen: 'webkitCancelFullScreen',
  fullscreenElement: 'webkitCurrentFullScreenElement',
  fullscreenEnabled: 'webkitCancelFullScreen',
  fullscreenchange: 'webkitfullscreenchange',
  fullscreenerror: 'webkitfullscreenerror'
},
// old firefox
{
  requestFullscreen: 'mozRequestFullScreen',
  exitFullscreen: 'mozCancelFullScreen',
  fullscreenElement: 'mozFullScreenElement',
  fullscreenEnabled: 'mozFullScreenEnabled',
  fullscreenchange: 'mozfullscreenchange',
  fullscreenerror: 'mozfullscreenerror'
},
// old IE
{
  requestFullscreen: 'msRequestFullscreen',
  exitFullscreen: 'msExitFullscreen',
  fullscreenElement: 'msFullscreenElement',
  fullscreenEnabled: 'msFullscreenEnabled',
  fullscreenchange: 'MSFullscreenChange',
  fullscreenerror: 'MSFullscreenError'
}];

// iOS API (on the video element itself!)
var iosMethods = {
  requestFullscreen: 'webkitEnterFullscreen',
  exitFullscreen: 'webkitExitFullscreen',
  fullscreenElement: null,
  fullscreenEnabled: 'webkitDisplayingFullscreen',
  fullscreenchange: 'fullscreenchange',
  fullscreenerror: 'fullscreenerror'
};
var isCurrentlyFullscreen = function isCurrentlyFullscreen(inputElement) {
  var _getFullscreenMethods = getFullscreenMethods(inputElement),
    methods = _getFullscreenMethods.methods,
    element = _getFullscreenMethods.element;
  if (methods !== null && methods !== void 0 && methods.fullscreenElement) {
    return Boolean(document[methods.fullscreenElement]);
  } else {
    // handle iOS API
    return Boolean((element === null || element === void 0 ? void 0 : element.webkitPresentationMode) === 'fullscreen');
  }
};
var enterFullscreen = function enterFullscreen(inputElement) {
  var _getFullscreenMethods2 = getFullscreenMethods(inputElement),
    methods = _getFullscreenMethods2.methods,
    element = _getFullscreenMethods2.element;
  if (methods) {
    return new Promise(function (resolve, reject) {
      var _element$parentElemen, _element$parentElemen2, _element$fullscreenMe, _element$fullscreenMe2;
      var fullscreenMethod = methods.requestFullscreen;
      var onFullScreen = function onFullScreen() {
        removeFullscreenEventListener(inputElement, onFullScreen);
        resolve();
      };
      addFullscreenEventListener(inputElement, onFullScreen);
      var returnPromise = methods.fullscreenElement ? element === null || element === void 0 ? void 0 : (_element$parentElemen = element.parentElement) === null || _element$parentElemen === void 0 ? void 0 : (_element$parentElemen2 = _element$parentElemen[fullscreenMethod]) === null || _element$parentElemen2 === void 0 ? void 0 : _element$parentElemen2.call(_element$parentElemen) : (_element$fullscreenMe = element === null || element === void 0 ? void 0 : (_element$fullscreenMe2 = element[fullscreenMethod]) === null || _element$fullscreenMe2 === void 0 ? void 0 : _element$fullscreenMe2.call(element)) !== null && _element$fullscreenMe !== void 0 ? _element$fullscreenMe : null;
      if (returnPromise === null) {
        return resolve();
      }
      if (returnPromise instanceof Promise) {
        returnPromise.then(onFullScreen).catch(reject);
      }
    });
  }
  return false;
};
var exitFullscreen = function exitFullscreen(inputElement) {
  var _getFullscreenMethods3 = getFullscreenMethods(inputElement),
    methods = _getFullscreenMethods3.methods,
    element = _getFullscreenMethods3.element;
  if (methods) {
    return new Promise(function (resolve, reject) {
      var _document, _document$methods$exi, _element$methods$exit, _element$methods$exit2;
      if (!isCurrentlyFullscreen(inputElement)) {
        resolve();
        return;
      }
      var onFullScreenExit = function onFullScreenExit() {
        removeFullscreenEventListener(inputElement, onFullScreenExit);
        resolve();
      };
      addFullscreenEventListener(inputElement, onFullScreenExit);
      var returnPromise = methods.fullscreenElement ? (_document = document) === null || _document === void 0 ? void 0 : (_document$methods$exi = _document[methods.exitFullscreen]) === null || _document$methods$exi === void 0 ? void 0 : _document$methods$exi.call(_document) : (_element$methods$exit = element === null || element === void 0 ? void 0 : (_element$methods$exit2 = element[methods.exitFullscreen]) === null || _element$methods$exit2 === void 0 ? void 0 : _element$methods$exit2.call(element)) !== null && _element$methods$exit !== void 0 ? _element$methods$exit : null;
      if (returnPromise instanceof Promise) {
        returnPromise.then(onFullScreenExit).catch(reject);
      }
    });
  }
  return false;
};
var addFullscreenEventListener = function addFullscreenEventListener(inputElement, callback) {
  var _getFullscreenMethods4 = getFullscreenMethods(inputElement),
    methods = _getFullscreenMethods4.methods,
    element = _getFullscreenMethods4.element;
  if (methods && element) {
    var _element$parentElemen3;
    var parentElementOrElement = (_element$parentElemen3 = element === null || element === void 0 ? void 0 : element.parentElement) !== null && _element$parentElemen3 !== void 0 ? _element$parentElemen3 : element;
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : parentElementOrElement.addEventListener(methods.fullscreenchange, callback, false);
    return function () {
      removeFullscreenEventListener(inputElement, callback);
    };
  }
  return null;
};
var removeFullscreenEventListener = function removeFullscreenEventListener(inputElement, callback) {
  var _getFullscreenMethods5 = getFullscreenMethods(inputElement),
    methods = _getFullscreenMethods5.methods,
    element = _getFullscreenMethods5.element;
  if (methods && element) {
    var _element$parentElemen4;
    var parentElementOrElement = (_element$parentElemen4 = element === null || element === void 0 ? void 0 : element.parentElement) !== null && _element$parentElemen4 !== void 0 ? _element$parentElemen4 : element;
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : parentElementOrElement.removeEventListener(methods.fullscreenchange, callback, false);
    return true;
  }
  return false;
};
var getFullscreenMethods = function getFullscreenMethods(element) {
  if (isClient()) {
    var _iterator = _createForOfIteratorHelper(methodsList),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var methods = _step.value;
        var exitFullscreenMethod = methods.exitFullscreen;
        if (exitFullscreenMethod in document) {
          return {
            methods: methods,
            element: element
          };
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (element && iosMethods.requestFullscreen in element) {
      return {
        methods: iosMethods,
        element: element
      };
    }
  }
  return {
    methods: null
  };
};

var isPictureInPictureSupported = function isPictureInPictureSupported(element) {
  var _getPictureInPictureM = getPictureInPictureMode(element),
    apiType = _getPictureInPictureM.apiType;
  return Boolean(apiType);
};
var isCurrentlyPictureInPicture = function isCurrentlyPictureInPicture(inputElement) {
  var _getPictureInPictureM2 = getPictureInPictureMode(inputElement),
    apiType = _getPictureInPictureM2.apiType,
    element = _getPictureInPictureM2.element;
  if (apiType === 'w3c') {
    var _document;
    return Boolean((_document = document) === null || _document === void 0 ? void 0 : _document.pictureInPictureElement);
  } else if (apiType === 'webkit') {
    return (element === null || element === void 0 ? void 0 : element.webkitPresentationMode) === 'picture-in-picture';
  }
  return false;
};
var enterPictureInPicture = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(inputElement) {
    var _getPictureInPictureM3, apiType, element, _element$requestPictu, _element$webkitSetPre;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _getPictureInPictureM3 = getPictureInPictureMode(inputElement), apiType = _getPictureInPictureM3.apiType, element = _getPictureInPictureM3.element;
            _context.prev = 1;
            if (!(apiType === 'w3c')) {
              _context.next = 7;
              break;
            }
            _context.next = 5;
            return element === null || element === void 0 ? void 0 : (_element$requestPictu = element.requestPictureInPicture) === null || _element$requestPictu === void 0 ? void 0 : _element$requestPictu.call(element);
          case 5:
            _context.next = 10;
            break;
          case 7:
            if (!(apiType === 'webkit')) {
              _context.next = 10;
              break;
            }
            _context.next = 10;
            return element === null || element === void 0 ? void 0 : (_element$webkitSetPre = element.webkitSetPresentationMode) === null || _element$webkitSetPre === void 0 ? void 0 : _element$webkitSetPre.call(element, 'picture-in-picture');
          case 10:
            _context.next = 15;
            break;
          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](1);
            console.warn(_context.t0);
          case 15:
            return _context.abrupt("return", null);
          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 12]]);
  }));
  return function enterPictureInPicture(_x) {
    return _ref.apply(this, arguments);
  };
}();
var exitPictureInPicture = function exitPictureInPicture(inputElement) {
  var _getPictureInPictureM4 = getPictureInPictureMode(inputElement),
    apiType = _getPictureInPictureM4.apiType,
    element = _getPictureInPictureM4.element;
  if (apiType === 'w3c') {
    var _document$exitPicture, _document2, _document2$exitPictur;
    return (_document$exitPicture = (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$exitPictur = _document2.exitPictureInPicture) === null || _document2$exitPictur === void 0 ? void 0 : _document2$exitPictur.call(_document2)) !== null && _document$exitPicture !== void 0 ? _document$exitPicture : null;
  } else if (apiType === 'webkit') {
    var _element$webkitSetPre2, _element$webkitSetPre3;
    return (_element$webkitSetPre2 = element === null || element === void 0 ? void 0 : (_element$webkitSetPre3 = element.webkitSetPresentationMode) === null || _element$webkitSetPre3 === void 0 ? void 0 : _element$webkitSetPre3.call(element, 'inline')) !== null && _element$webkitSetPre2 !== void 0 ? _element$webkitSetPre2 : null;
  }
  return null;
};
var addEnterPictureInPictureEventListener = function addEnterPictureInPictureEventListener(inputElement, callback) {
  var _getPictureInPictureM5 = getPictureInPictureMode(inputElement),
    apiType = _getPictureInPictureM5.apiType,
    element = _getPictureInPictureM5.element;
  if (apiType === 'w3c' && element) {
    element.addEventListener('enterpictureinpicture', callback, false);
    return function () {
      element.removeEventListener('enterpictureinpicture', callback, false);
    };
  }
  if (apiType === 'webkit' && element) {
    var callbackComposed = function callbackComposed(e) {
      if ((element === null || element === void 0 ? void 0 : element.webkitPresentationMode) === 'picture-in-picture') {
        callback === null || callback === void 0 ? void 0 : callback(e);
      }
    };
    document.addEventListener('webkitpresentationmodechanged', callbackComposed, false);
    return function () {
      document.removeEventListener('webkitpresentationmodechanged', callbackComposed, false);
    };
  }
  return null;
};
var addExitPictureInPictureEventListener = function addExitPictureInPictureEventListener(inputElement, callback) {
  var _getPictureInPictureM6 = getPictureInPictureMode(inputElement),
    apiType = _getPictureInPictureM6.apiType,
    element = _getPictureInPictureM6.element;
  if (apiType === 'w3c' && element) {
    element.addEventListener('leavepictureinpicture', callback, false);
    return function () {
      element.removeEventListener('leavepictureinpicture', callback, false);
    };
  }
  if (apiType === 'webkit' && element) {
    var callbackComposed = function callbackComposed(e) {
      if ((element === null || element === void 0 ? void 0 : element.webkitPresentationMode) === 'inline') {
        callback === null || callback === void 0 ? void 0 : callback(e);
      }
    };
    document.addEventListener('webkitpresentationmodechanged', callbackComposed, false);
    return function () {
      document.removeEventListener('webkitpresentationmodechanged', callbackComposed, false);
    };
  }
  return null;
};
var getPictureInPictureMode = function getPictureInPictureMode(element) {
  if (isClient() && element instanceof HTMLVideoElement) {
    var _document3, _element$webkitSuppor;
    // we disable the next line since we handle missing Safari versions in the next statement
    // eslint-disable-next-line compat/compat
    if ((_document3 = document) !== null && _document3 !== void 0 && _document3.pictureInPictureEnabled) {
      return {
        apiType: 'w3c',
        element: element
      };
    }

    // fallback to trying webkit
    if (element !== null && element !== void 0 && (_element$webkitSuppor = element.webkitSupportsPresentationMode) !== null && _element$webkitSuppor !== void 0 && _element$webkitSuppor.call(element, 'picture-in-picture')) {
      return {
        apiType: 'webkit',
        element: element
      };
    }
  }
  return {
    apiType: null
  };
};

var MEDIA_CONTROLLER_INITIALIZED_ATTRIBUTE = 'data-controller-initialized';
var allKeyTriggers = ['KeyF', 'KeyK', 'KeyM', 'KeyI', 'KeyV', 'KeyX', 'Space', 'ArrowRight', 'ArrowLeft'];
var getBoundedVolume = function getBoundedVolume(value) {
  return Math.min(Math.max(0, value && !isNaN(value) && isFinite(value) ? value : 0), 1);
};

// if volume change is unsupported, the element will always return 1
// similar to https://github.com/videojs/video.js/pull/7514/files
var getIsVolumeChangeSupported = function getIsVolumeChangeSupported(element) {
  return new Promise(function (resolve) {
    var _element$volume;
    var prevVolume = (_element$volume = element === null || element === void 0 ? void 0 : element.volume) !== null && _element$volume !== void 0 ? _element$volume : DEFAULT_VOLUME_LEVEL;
    var newVolume = 0.342;

    // set new value and test
    element.volume = newVolume;
    setTimeout(function () {
      var isSupported = element.volume !== 1;

      // reset to old value
      element.volume = getBoundedVolume(prevVolume);
      resolve(isSupported);
    });
  });
};
var delay = function delay(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};
var addEventListeners = function addEventListeners(store) {
  var _store$getState, _element$parentElemen;
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref$hotkeys = _ref.hotkeys,
    hotkeys = _ref$hotkeys === void 0 ? true : _ref$hotkeys,
    _ref$autohide = _ref.autohide,
    autohide = _ref$autohide === void 0 ? DEFAULT_AUTOHIDE_TIME : _ref$autohide;
  var _element = store === null || store === void 0 ? void 0 : (_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : _store$getState._element;
  var initializedState = store.getState();

  // restore the persisted values from store
  if (_element) {
    setTimeout(function () {
      if (_element && !store.getState().muted) {
        store.getState().requestVolume(initializedState.volume);
      }
    }, 1);
  }
  var element = _element;
  var onLoadedMetadata = function onLoadedMetadata() {
    return store.getState().onCanPlay();
  };
  var onPlay = function onPlay() {
    store.getState().onPlay();
  };
  var onPause = function onPause() {
    store.getState().onPause();
  };
  var onDurationChange = function onDurationChange() {
    var _element$duration;
    return store.getState().onDurationChange((_element$duration = element === null || element === void 0 ? void 0 : element.duration) !== null && _element$duration !== void 0 ? _element$duration : 0);
  };
  var onKeyUp = function onKeyUp(e) {
    e.preventDefault();
    e.stopPropagation();
    var code = e.code;
    store.getState()._updateLastInteraction();
    if (allKeyTriggers.includes(code)) {
      if (code === 'Space' || code === 'KeyK') {
        store.getState().togglePlay();
      } else if (code === 'KeyF') {
        store.getState().requestToggleFullscreen();
      } else if (code === 'KeyI') {
        store.getState().requestTogglePictureInPicture();
      } else if (code === 'ArrowRight') {
        store.getState().requestSeekForward();
      } else if (code === 'ArrowLeft') {
        store.getState().requestSeekBack();
      } else if (code === 'KeyM') {
        store.getState().requestToggleMute();
      } else if (code === 'KeyV') {
        store.getState().toggleVideo();
      } else if (code === 'KeyX') {
        store.getState().requestClip();
      }
    }
  };
  var onMouseEnter = function onMouseEnter() {
    store.getState()._updateLastInteraction();
  };
  var onMouseLeave = function onMouseLeave() {
    if (autohide) {
      store.getState().setHidden(true);
    }
  };
  var onMouseMove = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store.getState()._updateLastInteraction();
            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function onMouseMove() {
      return _ref2.apply(this, arguments);
    };
  }();
  var onTouchUpdate = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              store.getState()._updateLastInteraction();
            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return function onTouchUpdate() {
      return _ref3.apply(this, arguments);
    };
  }();
  var onVolumeChange = function onVolumeChange() {
    if (typeof (element === null || element === void 0 ? void 0 : element.volume) !== 'undefined' && (element === null || element === void 0 ? void 0 : element.volume) !== store.getState().volume) {
      store.getState()._setVolume(element.volume);
    }
  };
  var onTimeUpdate = function onTimeUpdate() {
    var _element$currentTime, _element$duration2;
    store.getState().onProgress((_element$currentTime = element === null || element === void 0 ? void 0 : element.currentTime) !== null && _element$currentTime !== void 0 ? _element$currentTime : 0);
    if (element && ((_element$duration2 = element === null || element === void 0 ? void 0 : element.duration) !== null && _element$duration2 !== void 0 ? _element$duration2 : 0) > 0) {
      var currentTime = element.currentTime;
      var buffered = _toConsumableArray(Array(element.buffered.length)).reduce(function (prev, _curr, i) {
        var start = element.buffered.start(element.buffered.length - 1 - i);
        var end = element.buffered.end(element.buffered.length - 1 - i);

        // if the TimeRange covers the current time, then use this value
        if (start <= currentTime && end >= currentTime) {
          return end;
        }
        return prev;
      },
      // default to no buffering
      0);
      store.getState()._updateBuffered(buffered);
    }
  };
  var retryCount = 0;
  var onError = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              store.getState().setError(e.message);
              _context3.next = 3;
              return new Promise(function (r) {
                return setTimeout(r, 1000 * ++retryCount);
              });
            case 3:
              element === null || element === void 0 ? void 0 : element.load();
            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return function onError(_x) {
      return _ref4.apply(this, arguments);
    };
  }();
  var onWaiting = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              store.getState().setWaiting(true);
            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return function onWaiting() {
      return _ref5.apply(this, arguments);
    };
  }();
  var onStalled = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              store.getState().setStalled(true);
            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return function onStalled() {
      return _ref6.apply(this, arguments);
    };
  }();
  var onLoadStart = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              store.getState().setLoading(true);
            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return function onLoadStart() {
      return _ref7.apply(this, arguments);
    };
  }();
  var onResize = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              store.getState().setSize(_objectSpread2(_objectSpread2({}, element !== null && element !== void 0 && element.videoHeight && element !== null && element !== void 0 && element.videoWidth ? {
                media: {
                  height: element.videoHeight,
                  width: element.videoWidth
                }
              } : {}), element !== null && element !== void 0 && element.clientHeight && element !== null && element !== void 0 && element.clientWidth ? {
                container: {
                  height: element.clientHeight,
                  width: element.clientWidth
                }
              } : {}));
            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));
    return function onResize() {
      return _ref8.apply(this, arguments);
    };
  }();
  if (element) {
    onResize();
  }
  var parentElementOrElement = (_element$parentElemen = element === null || element === void 0 ? void 0 : element.parentElement) !== null && _element$parentElemen !== void 0 ? _element$parentElemen : element;
  if (element) {
    element.addEventListener('volumechange', onVolumeChange);
    element.addEventListener('loadedmetadata', onLoadedMetadata);
    element.addEventListener('play', onPlay);
    element.addEventListener('pause', onPause);
    element.addEventListener('durationchange', onDurationChange);
    element.addEventListener('timeupdate', onTimeUpdate);
    element.addEventListener('error', onError);
    element.addEventListener('waiting', onWaiting);
    element.addEventListener('stalled', onStalled);
    element.addEventListener('loadstart', onLoadStart);
    element.addEventListener('resize', onResize);
    if (parentElementOrElement) {
      if (hotkeys) {
        parentElementOrElement.addEventListener('keyup', onKeyUp);
      }
      if (autohide) {
        parentElementOrElement.addEventListener('mouseenter', onMouseEnter);
        parentElementOrElement.addEventListener('mouseleave', onMouseLeave);
        parentElementOrElement.addEventListener('mousemove', onMouseMove);
        parentElementOrElement.addEventListener('touchstart', onTouchUpdate);
        parentElementOrElement.addEventListener('touchend', onTouchUpdate);
        parentElementOrElement.addEventListener('touchmove', onTouchUpdate);
      }
    }
    element.load();
    getIsVolumeChangeSupported(element).then(function (isVolumeChangeSupported) {
      return store.getState().setIsVolumeChangeSupported(isVolumeChangeSupported);
    });
    element.setAttribute(MEDIA_CONTROLLER_INITIALIZED_ATTRIBUTE, 'true');
  }
  var onFullscreenChange = function onFullscreenChange() {
    store.getState().setFullscreen(isCurrentlyFullscreen(element));
  };
  var onEnterPictureInPicture = function onEnterPictureInPicture() {
    store.getState().setPictureInPicture(true);
  };
  var onExitPictureInPicture = function onExitPictureInPicture() {
    store.getState().setPictureInPicture(false);
  };

  // add effects
  var removeEffectsFromStore = addEffectsToStore(store, {
    autohide: autohide
  });

  // add fullscreen listener
  var removeFullscreenListener = addFullscreenEventListener(element, onFullscreenChange);

  // add picture in picture listeners
  var removeEnterPictureInPictureListener = addEnterPictureInPictureEventListener(element, onEnterPictureInPicture);
  var removeExitPictureInPictureListener = addExitPictureInPictureEventListener(element, onExitPictureInPicture);
  var _destroy = function destroy() {
    var _element$removeEventL, _element$removeEventL2, _element$removeEventL3, _element$removeEventL4, _element$removeEventL5, _element$removeEventL6, _element$removeEventL7, _element$removeEventL8, _element$removeEventL9, _element$removeEventL10, _element$removeEventL11, _parentElementOrEleme, _parentElementOrEleme2, _parentElementOrEleme3, _parentElementOrEleme4, _parentElementOrEleme5, _parentElementOrEleme6, _parentElementOrEleme7, _element$removeAttrib;
    removeFullscreenListener === null || removeFullscreenListener === void 0 ? void 0 : removeFullscreenListener();
    removeEnterPictureInPictureListener === null || removeEnterPictureInPictureListener === void 0 ? void 0 : removeEnterPictureInPictureListener();
    removeExitPictureInPictureListener === null || removeExitPictureInPictureListener === void 0 ? void 0 : removeExitPictureInPictureListener();
    element === null || element === void 0 ? void 0 : (_element$removeEventL = element.removeEventListener) === null || _element$removeEventL === void 0 ? void 0 : _element$removeEventL.call(element, 'volumechange', onVolumeChange);
    element === null || element === void 0 ? void 0 : (_element$removeEventL2 = element.removeEventListener) === null || _element$removeEventL2 === void 0 ? void 0 : _element$removeEventL2.call(element, 'loadedmetadata', onLoadedMetadata);
    element === null || element === void 0 ? void 0 : (_element$removeEventL3 = element.removeEventListener) === null || _element$removeEventL3 === void 0 ? void 0 : _element$removeEventL3.call(element, 'play', onPlay);
    element === null || element === void 0 ? void 0 : (_element$removeEventL4 = element.removeEventListener) === null || _element$removeEventL4 === void 0 ? void 0 : _element$removeEventL4.call(element, 'pause', onPause);
    element === null || element === void 0 ? void 0 : (_element$removeEventL5 = element.removeEventListener) === null || _element$removeEventL5 === void 0 ? void 0 : _element$removeEventL5.call(element, 'durationchange', onDurationChange);
    element === null || element === void 0 ? void 0 : (_element$removeEventL6 = element.removeEventListener) === null || _element$removeEventL6 === void 0 ? void 0 : _element$removeEventL6.call(element, 'timeupdate', onTimeUpdate);
    element === null || element === void 0 ? void 0 : (_element$removeEventL7 = element.removeEventListener) === null || _element$removeEventL7 === void 0 ? void 0 : _element$removeEventL7.call(element, 'error', onError);
    element === null || element === void 0 ? void 0 : (_element$removeEventL8 = element.removeEventListener) === null || _element$removeEventL8 === void 0 ? void 0 : _element$removeEventL8.call(element, 'waiting', onWaiting);
    element === null || element === void 0 ? void 0 : (_element$removeEventL9 = element.removeEventListener) === null || _element$removeEventL9 === void 0 ? void 0 : _element$removeEventL9.call(element, 'stalled', onStalled);
    element === null || element === void 0 ? void 0 : (_element$removeEventL10 = element.removeEventListener) === null || _element$removeEventL10 === void 0 ? void 0 : _element$removeEventL10.call(element, 'loadstart', onLoadStart);
    element === null || element === void 0 ? void 0 : (_element$removeEventL11 = element.removeEventListener) === null || _element$removeEventL11 === void 0 ? void 0 : _element$removeEventL11.call(element, 'resize', onResize);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme = parentElementOrElement.removeEventListener) === null || _parentElementOrEleme === void 0 ? void 0 : _parentElementOrEleme.call(parentElementOrElement, 'keyup', onKeyUp);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme2 = parentElementOrElement.removeEventListener) === null || _parentElementOrEleme2 === void 0 ? void 0 : _parentElementOrEleme2.call(parentElementOrElement, 'mouseenter', onMouseEnter);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme3 = parentElementOrElement.removeEventListener) === null || _parentElementOrEleme3 === void 0 ? void 0 : _parentElementOrEleme3.call(parentElementOrElement, 'mouseleave', onMouseLeave);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme4 = parentElementOrElement.removeEventListener) === null || _parentElementOrEleme4 === void 0 ? void 0 : _parentElementOrEleme4.call(parentElementOrElement, 'mousemove', onMouseMove);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme5 = parentElementOrElement.addEventListener) === null || _parentElementOrEleme5 === void 0 ? void 0 : _parentElementOrEleme5.call(parentElementOrElement, 'touchstart', onTouchUpdate);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme6 = parentElementOrElement.addEventListener) === null || _parentElementOrEleme6 === void 0 ? void 0 : _parentElementOrEleme6.call(parentElementOrElement, 'touchend', onTouchUpdate);
    parentElementOrElement === null || parentElementOrElement === void 0 ? void 0 : (_parentElementOrEleme7 = parentElementOrElement.addEventListener) === null || _parentElementOrEleme7 === void 0 ? void 0 : _parentElementOrEleme7.call(parentElementOrElement, 'touchmove', onTouchUpdate);
    removeEffectsFromStore === null || removeEffectsFromStore === void 0 ? void 0 : removeEffectsFromStore();
    element === null || element === void 0 ? void 0 : (_element$removeAttrib = element.removeAttribute) === null || _element$removeAttrib === void 0 ? void 0 : _element$removeAttrib.call(element, MEDIA_CONTROLLER_INITIALIZED_ATTRIBUTE);
  };
  return {
    destroy: function destroy() {
      _destroy === null || _destroy === void 0 ? void 0 : _destroy();
    }
  };
};
var previousPromise;
var addEffectsToStore = function addEffectsToStore(store, options) {
  // add effects to store changes
  return store.subscribe( /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(current, prev) {
      var _current$_mediaStream, _current$_mediaStream2, _current$_mediaStream3, audioTracks, _iterator, _step, audioTrack, _current$_mediaStream4, _current$_mediaStream5, _current$_mediaStream6, videoTracks, _iterator2, _step2, videoTrack, _store$getState2, device, isFullscreen, _current$playbackOffs, _current$onClipStarte, clipLength, playbackId, estimatedServerClipTime, startTime, endTime, isPictureInPicture;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              if (!current._element) {
                _context8.next = 24;
                break;
              }
              if (!previousPromise) {
                _context8.next = 11;
                break;
              }
              _context8.prev = 3;
              _context8.next = 6;
              return previousPromise;
            case 6:
              _context8.next = 11;
              break;
            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](3);
              console.warn(_context8.t0);
            case 11:
              if (current._requestedPlayPauseLastTime !== prev._requestedPlayPauseLastTime) {
                if (current._element.paused) {
                  previousPromise = current._element.play();
                } else {
                  current._element.pause();
                }
              }
              if (current.volume !== prev.volume) {
                current._element.volume = current.volume;
              }
              if (!current.ingestUrl) {
                current._element.muted = current.muted;
                if (current.muted !== prev.muted) {
                  if (current.volume === 0) {
                    current._element.volume = DEFAULT_VOLUME_LEVEL;
                  }
                }
              } else {
                if (current.muted !== prev.muted) {
                  audioTracks = (_current$_mediaStream = current === null || current === void 0 ? void 0 : (_current$_mediaStream2 = current._mediaStream) === null || _current$_mediaStream2 === void 0 ? void 0 : (_current$_mediaStream3 = _current$_mediaStream2.getAudioTracks) === null || _current$_mediaStream3 === void 0 ? void 0 : _current$_mediaStream3.call(_current$_mediaStream2)) !== null && _current$_mediaStream !== void 0 ? _current$_mediaStream : [];
                  _iterator = _createForOfIteratorHelper(audioTracks);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      audioTrack = _step.value;
                      audioTrack.enabled = !current.muted;
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                }
                if (current.video !== prev.video) {
                  videoTracks = (_current$_mediaStream4 = current === null || current === void 0 ? void 0 : (_current$_mediaStream5 = current._mediaStream) === null || _current$_mediaStream5 === void 0 ? void 0 : (_current$_mediaStream6 = _current$_mediaStream5.getVideoTracks) === null || _current$_mediaStream6 === void 0 ? void 0 : _current$_mediaStream6.call(_current$_mediaStream5)) !== null && _current$_mediaStream4 !== void 0 ? _current$_mediaStream4 : [];
                  _iterator2 = _createForOfIteratorHelper(videoTracks);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      videoTrack = _step2.value;
                      videoTrack.enabled = Boolean(current.video);
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                }
              }
              if (current._requestedRangeToSeekTo !== prev._requestedRangeToSeekTo) {
                // Can't set the time before the media is ready
                // Ignore if readyState isn't supported
                if (typeof current._element.readyState === 'undefined' || current._element.readyState > 0) {
                  current._element.currentTime = current._requestedRangeToSeekTo;
                }
              }

              // user has interacted with element
              if (!(options.autohide && current._lastInteraction !== prev._lastInteraction)) {
                _context8.next = 21;
                break;
              }
              _store$getState2 = store.getState(), device = _store$getState2.device;
              if (!device.isMobile) {
                store.getState().setHidden(false);
              }
              _context8.next = 20;
              return delay(options.autohide);
            case 20:
              if (!store.getState().hidden && current._lastInteraction === store.getState()._lastInteraction) {
                store.getState().setHidden(true);
              }
            case 21:
              if (current._requestedFullscreenLastTime !== prev._requestedFullscreenLastTime) {
                isFullscreen = isCurrentlyFullscreen(current._element);
                if (!isFullscreen) {
                  previousPromise = enterFullscreen(current._element);
                } else {
                  previousPromise = exitFullscreen(current._element);
                }
              }
              if (current._requestedClipLastTime !== prev._requestedClipLastTime && current.clipLength && current.playbackId) {
                clipLength = current.clipLength;
                playbackId = current.playbackId; // we get the estimated time on the server that the user "clipped"
                // by subtracting the offset from the recorded clip time
                estimatedServerClipTime = current._requestedClipLastTime - ((_current$playbackOffs = current.playbackOffsetMs) !== null && _current$playbackOffs !== void 0 ? _current$playbackOffs : 0);
                startTime = estimatedServerClipTime - clipLength * 1000;
                endTime = estimatedServerClipTime;
                current === null || current === void 0 ? void 0 : (_current$onClipStarte = current.onClipStarted) === null || _current$onClipStarte === void 0 ? void 0 : _current$onClipStarte.call(current);
                previousPromise = createClip({
                  playbackId: playbackId,
                  startTime: startTime,
                  endTime: endTime
                }).then(function (asset) {
                  if (asset !== null && asset !== void 0 && asset.id) {
                    var _current$onClipCreate;
                    current === null || current === void 0 ? void 0 : (_current$onClipCreate = current.onClipCreated) === null || _current$onClipCreate === void 0 ? void 0 : _current$onClipCreate.call(current, asset);
                  } else {
                    throw new Error('returned asset was not defined');
                  }
                }).catch(function (error) {
                  var _current$onClipError;
                  return current === null || current === void 0 ? void 0 : (_current$onClipError = current.onClipError) === null || _current$onClipError === void 0 ? void 0 : _current$onClipError.call(current, error);
                });
              }
              if (current._requestedPictureInPictureLastTime !== prev._requestedPictureInPictureLastTime) {
                isPictureInPicture = isCurrentlyPictureInPicture(current._element);
                if (!isPictureInPicture) {
                  previousPromise = enterPictureInPicture(current._element);
                } else {
                  previousPromise = exitPictureInPicture(current._element);
                }
              }
            case 24:
              _context8.next = 29;
              break;
            case 26:
              _context8.prev = 26;
              _context8.t1 = _context8["catch"](0);
              console.warn(_context8.t1);
            case 29:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, null, [[0, 26], [3, 8]]);
    }));
    return function (_x2, _x3) {
      return _ref9.apply(this, arguments);
    };
  }());
};

var getDeviceInfo = function getDeviceInfo(version) {
  return {
    version: version,
    isAndroid: isAndroid(),
    isIos: isIos(),
    isMobile: isMobile(),
    userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Node.js or unknown'
  };
};

/**
 * Gather playback metrics from a generic HTML5 video/audio element and
 * report them to a websocket. Automatically handles a redirect to get the
 * metrics endpoint.
 *
 * @param element Element to capture playback metrics from.
 * @param sourceUrl Source URL for the player.
 * @param onError Callback when an error with metrics occurs.
 * @param opts Options for the metrics reporting.
 * @returns A callback for destroying the store and metrics.
 */
function addMediaMetrics(element, onError, opts) {
  var store = createControllerStore({
    element: element !== null && element !== void 0 ? element : undefined,
    device: getDeviceInfo(version.core),
    storage: createStorage(typeof window !== 'undefined' ? {
      storage: window.localStorage
    } : {}),
    mediaProps: opts !== null && opts !== void 0 ? opts : {
      autoPlay: Boolean(element === null || element === void 0 ? void 0 : element.autoplay),
      muted: Boolean(element === null || element === void 0 ? void 0 : element.muted),
      priority: false
    },
    opts: opts !== null && opts !== void 0 ? opts : {}
  });
  var _addEventListeners = addEventListeners(store, opts),
    destroyListeners = _addEventListeners.destroy;
  var _addMediaMetricsToSto = addMediaMetricsToStore(store, onError),
    metrics = _addMediaMetricsToSto.metrics,
    destroyMetrics = _addMediaMetricsToSto.destroy;
  return {
    metrics: metrics,
    destroy: function destroy() {
      var _store$destroy;
      destroyListeners === null || destroyListeners === void 0 ? void 0 : destroyListeners();
      destroyMetrics === null || destroyMetrics === void 0 ? void 0 : destroyMetrics();
      store === null || store === void 0 ? void 0 : (_store$destroy = store.destroy) === null || _store$destroy === void 0 ? void 0 : _store$destroy.call(store);
    }
  };
}

export { addEventListeners, addMediaMetrics, getDeviceInfo, isPictureInPictureSupported };
