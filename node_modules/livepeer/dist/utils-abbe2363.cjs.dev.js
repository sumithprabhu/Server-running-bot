'use strict';

require('core-js/modules/es.regexp.exec.js');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/es.array.includes.js');
require('core-js/modules/es.string.includes.js');

function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var isClient = function isClient() {
  return typeof window !== 'undefined';
};
var ua = function ua() {
  var _window, _window$navigator, _window$navigator$use;
  return isClient() ? (_window = window) === null || _window === void 0 ? void 0 : (_window$navigator = _window.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$use = _window$navigator.userAgent) === null || _window$navigator$use === void 0 ? void 0 : _window$navigator$use.toLowerCase() : '';
};
var isIos = function isIos() {
  return /iphone|ipad|ipod|ios|CriOS|FxiOS/.test(ua());
};
var isAndroid = function isAndroid() {
  return /android/.test(ua());
};
var isMobile = function isMobile() {
  return isClient() && (isIos() || isAndroid());
};

/**
 * Checks if the native HTML5 video player can play the mime type.
 */
var canPlayMediaNatively = function canPlayMediaNatively(src) {
  if (isClient() && src !== null && src !== void 0 && src.mime) {
    var _src$type;
    // TODO fix this to better support audio mime types
    if (src !== null && src !== void 0 && (_src$type = src.type) !== null && _src$type !== void 0 && _src$type.includes('audio')) {
      var audio = document.createElement('audio');
      return audio.canPlayType(src.mime).length > 0;
    } else {
      var video = document.createElement('video');
      return video.canPlayType(src.mime).length > 0;
    }
  }
  return true;
};

exports._defineProperty = _defineProperty;
exports.canPlayMediaNatively = canPlayMediaNatively;
exports.isAndroid = isAndroid;
exports.isClient = isClient;
exports.isIos = isIos;
exports.isMobile = isMobile;
