export declare const css: <Composers extends (string | import("@stitches/core/types/util").Function | {
    [name: string]: unknown;
})[], CSS = import("@stitches/core/types/css-util").CSS<{
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, {
    borderStyles: {
        containerBorderStyle: any;
    };
    borderWidths: {
        containerBorderWidth: any;
        loadingWidth: any;
    };
    colors: {
        accent: any;
        background: any;
        containerBorderColor: any;
        icon: any;
        iconHover: any;
        liveIndicator: any;
        loading: any;
        progressLeft: any;
        progressMiddle: any;
        progressRight: any;
        progressThumb: any;
        volumeLeft: any;
        volumeMiddle: any;
        volumeRight: any;
        volumeThumb: any;
        errorText: any;
    };
    fonts: {
        display: any;
    };
    fontSizes: {
        timeFontSize: any;
        timeFontSizeMd: any;
        timeFontSizeSm: any;
        titleFontSize: any;
        titleFontSizeMd: any;
        titleFontSizeSm: any;
        errorTitleFontSize: any;
        errorTitleFontSizeMd: any;
        errorTitleFontSizeSm: any;
        errorTextFontSize: any;
        errorTextFontSizeMd: any;
        errorTextFontSizeSm: any;
    };
    fontWeights: {
        titleFontWeight: any;
        errorTitleFontWeight: any;
    };
    sizes: {
        iconButtonSize: any;
        iconButtonSizeSm: any;
        liveIndicatorSize: any;
        loading: any;
        thumb: any;
        thumbActive: any;
        trackActive: any;
        trackContainerHeight: any;
        trackContainerHeightSm: any;
        trackInactive: any;
    };
    space: {
        controlsBottomMarginX: any;
        controlsBottomMarginY: any;
        controlsTopMarginX: any;
        controlsTopMarginY: any;
        timeMarginX: any;
    };
    radii: {
        containerBorderRadius: any;
        slider: any;
    };
}, import("@stitches/core/types/config").DefaultThemeMap, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/core/types/util").Function ? Composers[K] : import("@stitches/core/types/stitches").RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/core/types/util").String | import("@stitches/core/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/core/types/util").WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/core/types/util").String | import("@stitches/core/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/core/types/util").WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => import("@stitches/core/types/styled-component").CssComponent<import("@stitches/core/types/styled-component").StyledComponentType<Composers>, import("@stitches/core/types/styled-component").StyledComponentProps<Composers>, {
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, CSS>, createTheme: <Argument0 extends string | ({
    borderStyles?: {
        containerBorderStyle?: string | number | boolean | undefined;
    } | undefined;
    borderWidths?: {
        containerBorderWidth?: string | number | boolean | undefined;
        loadingWidth?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        accent?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        containerBorderColor?: string | number | boolean | undefined;
        icon?: string | number | boolean | undefined;
        iconHover?: string | number | boolean | undefined;
        liveIndicator?: string | number | boolean | undefined;
        loading?: string | number | boolean | undefined;
        progressLeft?: string | number | boolean | undefined;
        progressMiddle?: string | number | boolean | undefined;
        progressRight?: string | number | boolean | undefined;
        progressThumb?: string | number | boolean | undefined;
        volumeLeft?: string | number | boolean | undefined;
        volumeMiddle?: string | number | boolean | undefined;
        volumeRight?: string | number | boolean | undefined;
        volumeThumb?: string | number | boolean | undefined;
        errorText?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        display?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        timeFontSize?: string | number | boolean | undefined;
        timeFontSizeMd?: string | number | boolean | undefined;
        timeFontSizeSm?: string | number | boolean | undefined;
        titleFontSize?: string | number | boolean | undefined;
        titleFontSizeMd?: string | number | boolean | undefined;
        titleFontSizeSm?: string | number | boolean | undefined;
        errorTitleFontSize?: string | number | boolean | undefined;
        errorTitleFontSizeMd?: string | number | boolean | undefined;
        errorTitleFontSizeSm?: string | number | boolean | undefined;
        errorTextFontSize?: string | number | boolean | undefined;
        errorTextFontSizeMd?: string | number | boolean | undefined;
        errorTextFontSizeSm?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        titleFontWeight?: string | number | boolean | undefined;
        errorTitleFontWeight?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        iconButtonSize?: string | number | boolean | undefined;
        iconButtonSizeSm?: string | number | boolean | undefined;
        liveIndicatorSize?: string | number | boolean | undefined;
        loading?: string | number | boolean | undefined;
        thumb?: string | number | boolean | undefined;
        thumbActive?: string | number | boolean | undefined;
        trackActive?: string | number | boolean | undefined;
        trackContainerHeight?: string | number | boolean | undefined;
        trackContainerHeightSm?: string | number | boolean | undefined;
        trackInactive?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        controlsBottomMarginX?: string | number | boolean | undefined;
        controlsBottomMarginY?: string | number | boolean | undefined;
        controlsTopMarginX?: string | number | boolean | undefined;
        controlsTopMarginY?: string | number | boolean | undefined;
        timeMarginX?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        containerBorderRadius?: string | number | boolean | undefined;
        slider?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    borderStyles?: {
        containerBorderStyle?: string | number | boolean | undefined;
    } | undefined;
    borderWidths?: {
        containerBorderWidth?: string | number | boolean | undefined;
        loadingWidth?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        accent?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        containerBorderColor?: string | number | boolean | undefined;
        icon?: string | number | boolean | undefined;
        iconHover?: string | number | boolean | undefined;
        liveIndicator?: string | number | boolean | undefined;
        loading?: string | number | boolean | undefined;
        progressLeft?: string | number | boolean | undefined;
        progressMiddle?: string | number | boolean | undefined;
        progressRight?: string | number | boolean | undefined;
        progressThumb?: string | number | boolean | undefined;
        volumeLeft?: string | number | boolean | undefined;
        volumeMiddle?: string | number | boolean | undefined;
        volumeRight?: string | number | boolean | undefined;
        volumeThumb?: string | number | boolean | undefined;
        errorText?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        display?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        timeFontSize?: string | number | boolean | undefined;
        timeFontSizeMd?: string | number | boolean | undefined;
        timeFontSizeSm?: string | number | boolean | undefined;
        titleFontSize?: string | number | boolean | undefined;
        titleFontSizeMd?: string | number | boolean | undefined;
        titleFontSizeSm?: string | number | boolean | undefined;
        errorTitleFontSize?: string | number | boolean | undefined;
        errorTitleFontSizeMd?: string | number | boolean | undefined;
        errorTitleFontSizeSm?: string | number | boolean | undefined;
        errorTextFontSize?: string | number | boolean | undefined;
        errorTextFontSizeMd?: string | number | boolean | undefined;
        errorTextFontSizeSm?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        titleFontWeight?: string | number | boolean | undefined;
        errorTitleFontWeight?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        iconButtonSize?: string | number | boolean | undefined;
        iconButtonSizeSm?: string | number | boolean | undefined;
        liveIndicatorSize?: string | number | boolean | undefined;
        loading?: string | number | boolean | undefined;
        thumb?: string | number | boolean | undefined;
        thumbActive?: string | number | boolean | undefined;
        trackActive?: string | number | boolean | undefined;
        trackContainerHeight?: string | number | boolean | undefined;
        trackContainerHeightSm?: string | number | boolean | undefined;
        trackInactive?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        controlsBottomMarginX?: string | number | boolean | undefined;
        controlsBottomMarginY?: string | number | boolean | undefined;
        controlsTopMarginX?: string | number | boolean | undefined;
        controlsTopMarginY?: string | number | boolean | undefined;
        timeMarginX?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        containerBorderRadius?: string | number | boolean | undefined;
        slider?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/core/types/stitches").ThemeTokens<Argument1, ""> : import("@stitches/core/types/stitches").ThemeTokens<Argument0, "">), defaultTheme: string & {
    className: string;
    selector: string;
} & {
    borderStyles: {
        containerBorderStyle: import("@stitches/core/types/theme").Token<"containerBorderStyle", string, "borderStyles", "">;
    };
    borderWidths: {
        containerBorderWidth: import("@stitches/core/types/theme").Token<"containerBorderWidth", string, "borderWidths", "">;
        loadingWidth: import("@stitches/core/types/theme").Token<"loadingWidth", string, "borderWidths", "">;
    };
    colors: {
        accent: import("@stitches/core/types/theme").Token<"accent", string, "colors", "">;
        background: import("@stitches/core/types/theme").Token<"background", string, "colors", "">;
        containerBorderColor: import("@stitches/core/types/theme").Token<"containerBorderColor", string, "colors", "">;
        icon: import("@stitches/core/types/theme").Token<"icon", string, "colors", "">;
        iconHover: import("@stitches/core/types/theme").Token<"iconHover", string, "colors", "">;
        liveIndicator: import("@stitches/core/types/theme").Token<"liveIndicator", string, "colors", "">;
        loading: import("@stitches/core/types/theme").Token<"loading", string, "colors", "">;
        progressLeft: import("@stitches/core/types/theme").Token<"progressLeft", string, "colors", "">;
        progressMiddle: import("@stitches/core/types/theme").Token<"progressMiddle", string, "colors", "">;
        progressRight: import("@stitches/core/types/theme").Token<"progressRight", string, "colors", "">;
        progressThumb: import("@stitches/core/types/theme").Token<"progressThumb", string, "colors", "">;
        volumeLeft: import("@stitches/core/types/theme").Token<"volumeLeft", string, "colors", "">;
        volumeMiddle: import("@stitches/core/types/theme").Token<"volumeMiddle", string, "colors", "">;
        volumeRight: import("@stitches/core/types/theme").Token<"volumeRight", string, "colors", "">;
        volumeThumb: import("@stitches/core/types/theme").Token<"volumeThumb", string, "colors", "">;
        errorText: import("@stitches/core/types/theme").Token<"errorText", string, "colors", "">;
    };
    fonts: {
        display: import("@stitches/core/types/theme").Token<"display", string, "fonts", "">;
    };
    fontSizes: {
        timeFontSize: import("@stitches/core/types/theme").Token<"timeFontSize", string, "fontSizes", "">;
        timeFontSizeMd: import("@stitches/core/types/theme").Token<"timeFontSizeMd", string, "fontSizes", "">;
        timeFontSizeSm: import("@stitches/core/types/theme").Token<"timeFontSizeSm", string, "fontSizes", "">;
        titleFontSize: import("@stitches/core/types/theme").Token<"titleFontSize", string, "fontSizes", "">;
        titleFontSizeMd: import("@stitches/core/types/theme").Token<"titleFontSizeMd", string, "fontSizes", "">;
        titleFontSizeSm: import("@stitches/core/types/theme").Token<"titleFontSizeSm", string, "fontSizes", "">;
        errorTitleFontSize: import("@stitches/core/types/theme").Token<"errorTitleFontSize", string, "fontSizes", "">;
        errorTitleFontSizeMd: import("@stitches/core/types/theme").Token<"errorTitleFontSizeMd", string, "fontSizes", "">;
        errorTitleFontSizeSm: import("@stitches/core/types/theme").Token<"errorTitleFontSizeSm", string, "fontSizes", "">;
        errorTextFontSize: import("@stitches/core/types/theme").Token<"errorTextFontSize", string, "fontSizes", "">;
        errorTextFontSizeMd: import("@stitches/core/types/theme").Token<"errorTextFontSizeMd", string, "fontSizes", "">;
        errorTextFontSizeSm: import("@stitches/core/types/theme").Token<"errorTextFontSizeSm", string, "fontSizes", "">;
    };
    fontWeights: {
        titleFontWeight: import("@stitches/core/types/theme").Token<"titleFontWeight", string, "fontWeights", "">;
        errorTitleFontWeight: import("@stitches/core/types/theme").Token<"errorTitleFontWeight", string, "fontWeights", "">;
    };
    sizes: {
        iconButtonSize: import("@stitches/core/types/theme").Token<"iconButtonSize", string, "sizes", "">;
        iconButtonSizeSm: import("@stitches/core/types/theme").Token<"iconButtonSizeSm", string, "sizes", "">;
        liveIndicatorSize: import("@stitches/core/types/theme").Token<"liveIndicatorSize", string, "sizes", "">;
        loading: import("@stitches/core/types/theme").Token<"loading", string, "sizes", "">;
        thumb: import("@stitches/core/types/theme").Token<"thumb", string, "sizes", "">;
        thumbActive: import("@stitches/core/types/theme").Token<"thumbActive", string, "sizes", "">;
        trackActive: import("@stitches/core/types/theme").Token<"trackActive", string, "sizes", "">;
        trackContainerHeight: import("@stitches/core/types/theme").Token<"trackContainerHeight", string, "sizes", "">;
        trackContainerHeightSm: import("@stitches/core/types/theme").Token<"trackContainerHeightSm", string, "sizes", "">;
        trackInactive: import("@stitches/core/types/theme").Token<"trackInactive", string, "sizes", "">;
    };
    space: {
        controlsBottomMarginX: import("@stitches/core/types/theme").Token<"controlsBottomMarginX", string, "space", "">;
        controlsBottomMarginY: import("@stitches/core/types/theme").Token<"controlsBottomMarginY", string, "space", "">;
        controlsTopMarginX: import("@stitches/core/types/theme").Token<"controlsTopMarginX", string, "space", "">;
        controlsTopMarginY: import("@stitches/core/types/theme").Token<"controlsTopMarginY", string, "space", "">;
        timeMarginX: import("@stitches/core/types/theme").Token<"timeMarginX", string, "space", "">;
    };
    radii: {
        containerBorderRadius: import("@stitches/core/types/theme").Token<"containerBorderRadius", string, "radii", "">;
        slider: import("@stitches/core/types/theme").Token<"slider", string, "radii", "">;
    };
}, getCssText: () => string;
