import { AspectRatio } from '@livepeer/core/media';
import { WebRTCVideoConfig } from './shared';
export type WebRTCTrackConstraints = {
    /**
     * The constraints applied to the broadcast media track.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints
     */
    streamConstraints?: MediaStreamConstraints;
    /**
     * The device ID used to constrain the video track.
     */
    videoDeviceId?: string;
    /**
     * The device ID used to constrain the video track.
     */
    audioDeviceId?: string;
};
export type WebRTCConnectedPayload = {
    stream: MediaStream;
    videoTransceiver: RTCRtpTransceiver;
    audioTransceiver: RTCRtpTransceiver;
};
/**
 * Client that uses WHIP to broadcast video over WebRTC.
 *
 * https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html
 */
export declare const createNewWHIP: <TElement extends HTMLMediaElement>(ingestUrl: string, element: TElement, aspectRatio?: AspectRatio, callbacks?: {
    onConnected?: ((payload: WebRTCConnectedPayload) => void) | undefined;
    onError?: ((data: Error) => void) | undefined;
} | undefined, config?: WebRTCVideoConfig) => {
    destroy: () => void;
};
/**
 * Ask for camera and microphone permissions and add video and audio tracks to the peerConnection.
 * If a media stream is passed in, use this for the connection.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
 */
export declare const changeMediaStream: <TElement extends HTMLMediaElement>({ newMediaStream, prevMediaStream, aspectRatio, element, onConnected, videoTransceiver, audioTransceiver, }: {
    newMediaStream: MediaStream;
    prevMediaStream: MediaStream | null;
    aspectRatio: AspectRatio;
    element: TElement;
    onConnected: (payload: WebRTCConnectedPayload) => void;
    videoTransceiver: RTCRtpTransceiver;
    audioTransceiver: RTCRtpTransceiver;
}) => Promise<void>;
/**
 * Ask for camera and microphone permissions and get the MediaStream for the given constraints.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
 */
export declare const getUserMedia: ({ source, }: {
    source: WebRTCTrackConstraints;
}) => Promise<MediaStream | null>;
export declare const getMediaDevices: (onDevicesUpdated: (devices: MediaDeviceInfo[]) => void) => () => void;
export declare const getDisplayMedia: (options?: DisplayMediaStreamOptions) => Promise<MediaStream | null>;
