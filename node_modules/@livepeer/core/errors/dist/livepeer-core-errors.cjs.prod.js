'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Error subclass for http errors.
 */
class HttpError extends Error {
  constructor( /** Number error code */
  code, /** Human-readable string */
  message, /** Low-level error */
  internal, /** Other useful information about error */
  data) {
    if (!Number.isInteger(code)) throw new Error('"code" must be an integer.');
    if (!message || typeof message !== 'string') throw new Error('"message" must be a nonempty string.');
    super(message);
    this.code = code;
    this.data = data;
    this.internal = internal;
  }
}
const STREAM_OPEN_ERROR_MESSAGE = 'stream open failed';
const STREAM_OFFLINE_ERROR_MESSAGE = 'stream is offline';
const STREAM_WAITING_FOR_DATA_ERROR_MESSAGE = 'stream is waiting for data';
const ACCESS_CONTROL_ERROR_MESSAGE = 'shutting down since this session is not allowed to view this stream';
const BFRAMES_ERROR_MESSAGE = 'metadata indicates that webrtc playback contains bframes';
const NOT_ACCEPTABLE_ERROR_MESSAGE = 'response indicates unacceptable playback protocol';
const isStreamOfflineError = error => error.message.toLowerCase().includes(STREAM_OPEN_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_WAITING_FOR_DATA_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_OFFLINE_ERROR_MESSAGE);
const isAccessControlError = error => error.message.toLowerCase().includes(ACCESS_CONTROL_ERROR_MESSAGE);
const isBframesError = error => error.message.toLowerCase().includes(BFRAMES_ERROR_MESSAGE);
const isNotAcceptableError = error => error.message.toLowerCase().includes(NOT_ACCEPTABLE_ERROR_MESSAGE);

exports.ACCESS_CONTROL_ERROR_MESSAGE = ACCESS_CONTROL_ERROR_MESSAGE;
exports.BFRAMES_ERROR_MESSAGE = BFRAMES_ERROR_MESSAGE;
exports.HttpError = HttpError;
exports.NOT_ACCEPTABLE_ERROR_MESSAGE = NOT_ACCEPTABLE_ERROR_MESSAGE;
exports.STREAM_OFFLINE_ERROR_MESSAGE = STREAM_OFFLINE_ERROR_MESSAGE;
exports.STREAM_OPEN_ERROR_MESSAGE = STREAM_OPEN_ERROR_MESSAGE;
exports.STREAM_WAITING_FOR_DATA_ERROR_MESSAGE = STREAM_WAITING_FOR_DATA_ERROR_MESSAGE;
exports.isAccessControlError = isAccessControlError;
exports.isBframesError = isBframesError;
exports.isNotAcceptableError = isNotAcceptableError;
exports.isStreamOfflineError = isStreamOfflineError;
