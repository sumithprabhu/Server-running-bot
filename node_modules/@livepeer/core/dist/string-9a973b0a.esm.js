const b64Encode = input => {
  try {
    if (typeof window !== 'undefined' && 'btoa' in window) {
      return window?.btoa?.(input) ?? null;
    } else {
      return Buffer?.from(input, 'binary')?.toString('base64') ?? null;
    }
  } catch (e) {
    return null;
  }
};
const b64Decode = input => {
  try {
    if (typeof window !== 'undefined' && 'atob' in window) {
      return window?.atob?.(input) ?? null;
    } else {
      return Buffer?.from(input, 'base64')?.toString('binary') ?? null;
    }
  } catch (e) {
    return null;
  }
};
const b64UrlEncode = input => {
  return escape(b64Encode(input));
};
const b64UrlDecode = input => {
  const unescaped = unescape(input);
  if (unescaped) {
    return b64Decode(unescaped);
  }
  return null;
};
const unescape = input => {
  return input ? (input + '==='.slice((input.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/') : null;
};
const escape = input => {
  return input?.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '') ?? null;
};

export { b64Encode as a, b64Decode as b, b64UrlDecode as c, b64UrlEncode as d };
