'use strict';

/**
 * Create a new object containing only the specified keys
 */
const pick = (obj, ...keys) => {
  try {
    const objectKeys = Object.keys(obj);
    return keys.filter(key => objectKeys.includes(key)).reduce((prev, curr) => ({
      ...prev,
      [curr]: obj[curr]
    }), {});
  } catch (e) {
    throw new Error('Could not pick keys for object.');
  }
};

/**
 * Create a new object excluding the specified keys
 */
function omit(obj, ...keys) {
  try {
    const objectKeys = Object.keys(obj);
    return objectKeys.filter(objectKey => !keys.some(key => String(key) === objectKey)).reduce((prev, curr) => ({
      ...prev,
      [curr]: obj[curr]
    }), {});
  } catch (e) {
    throw new Error('Could not omit keys for object.');
  }
}

exports.omit = omit;
exports.pick = pick;
