'use strict';

var middleware = require('zustand/middleware');
var vanilla = require('zustand/vanilla');

const noopStorage = {
  getItem: _key => '',
  setItem: (_key, _value) => {
    //
  },
  removeItem: _key => {
    //
  }
};
function createStorage({
  storage = noopStorage,
  key: prefix = 'livepeer'
}) {
  return {
    getItem: async (key, defaultState = null) => {
      try {
        const value = await storage.getItem(`${prefix}.${key}`);
        return value ? JSON.parse(value) : defaultState;
      } catch (error) {
        console.warn(error);
        return defaultState;
      }
    },
    setItem: async (key, value) => {
      if (value === null) {
        await storage.removeItem(`${prefix}.${key}`);
      } else {
        try {
          await storage.setItem(`${prefix}.${key}`, JSON.stringify(value));
        } catch (err) {
          console.error(err);
        }
      }
    },
    removeItem: async key => storage.removeItem(`${prefix}.${key}`)
  };
}

const storeKey = 'livepeer-store';
class Client {
  constructor({
    provider,
    storage = createStorage({})
  }) {
    // Create store
    this.store = vanilla.createStore(middleware.subscribeWithSelector(middleware.persist(() => ({
      provider: provider()
    }), {
      name: storeKey,
      storage: middleware.createJSONStorage(() => storage),
      // for now, we don't store any state in local storage
      partialize: _state => ({}),
      version: 1
    })));
    this.config = {
      provider,
      storage
    };
    this.storage = storage;
  }
  get error() {
    return this.store.getState().error;
  }
  get provider() {
    return this.store.getState().provider;
  }
  get subscribe() {
    return this.store.subscribe;
  }
  setState(updater) {
    const newState = typeof updater === 'function' ? updater(this.store.getState()) : updater;
    this.store.setState(newState, true);
  }
  clearState() {
    this.setState(x => ({
      ...x,
      data: undefined,
      error: undefined
    }));
  }
  async destroy() {
    this.clearState();
    this.store.destroy();
  }
}
let client = null;
function createClient(config) {
  const client_ = new Client(config);
  client = client_;
  return client_;
}
function getClient() {
  if (!client) {
    throw new Error('No livepeer client found.');
  }
  return client;
}
function clearClient() {
  client = null;
}

exports.Client = Client;
exports.clearClient = clearClient;
exports.createClient = createClient;
exports.createStorage = createStorage;
exports.getClient = getClient;
exports.noopStorage = noopStorage;
