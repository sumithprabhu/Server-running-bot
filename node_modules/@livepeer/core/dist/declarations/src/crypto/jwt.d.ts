import { StringValue } from 'ms';
import { ClientConfig } from '../client';
import { LivepeerProvider } from '../types';
export type JWTPayload = {
    /**
     * JWT Issuer
     *
     * @see [RFC7519#section-4.1.1](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.1)
     */
    iss?: string;
    /**
     * JWT Subject
     *
     * @see [RFC7519#section-4.1.2](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.2)
     */
    sub?: string;
    /** JWT Audience [RFC7519#section-4.1.3](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.3). */
    aud?: string | string[];
    /**
     * JWT ID
     *
     * @see [RFC7519#section-4.1.7](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.7)
     */
    jti?: string;
    /**
     * JWT Not Before
     *
     * @see [RFC7519#section-4.1.5](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.5)
     */
    nbf?: number;
    /**
     * JWT Expiration Time
     *
     * @see [RFC7519#section-4.1.4](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.4)
     */
    exp?: number;
    /**
     * JWT Issued At
     *
     * @see [RFC7519#section-4.1.6](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.6)
     */
    iat?: number;
    /**
     * Allowed action for this token. `pull` is allowing playback. Custom claim.
     */
    action: 'pull';
    /** Any other JWT Claim Set member. */
    [propName: string]: unknown;
};
export type JWTHeader = {
    /** JWE "alg" (Algorithm) Header Parameter. */
    alg: 'ES256';
    /** "typ" (Type) Header Parameter. */
    typ: 'JWT';
};
export type SignAccessJwtOptions = {
    /**
     * The private key used to sign the token. **This comes base64-encoded from the livepeer provider
     * - this should be kept as base64.**
     *
     * This can also be a CryptoKey if the key has already been imported on the client.
     */
    privateKey: CryptoKey | string;
    /**
     * The public key corresponding to the public key. **This comes
     * base64-encoded from the livepeer provider - this should be kept as base64.**
     */
    publicKey: string;
    /**
     * The playback ID which you would like to restrict access to (required if `streamId`
     * is not provided).
     */
    playbackId?: string;
    /**
     * The stream ID which you would like to restrict access to (required if `playbackId`
     * is not provided).
     */
    streamId?: string;
    /**
     * The issuer of the token. Usually a string or URL identifying your app.
     */
    issuer: string;
    /**
     * The expiration of the token in unix timestamp. If a string is passed, it must be a duration like `1d`
     * and will be added to the current timestamp. If a number is passed, this will be used as the expiration.
     * Defaults to `1d`.
     */
    expiration?: StringValue;
    /**
     * Custom properties added to the token. These can be used across your app to hold token state (user ID, etc).
     */
    custom?: {
        [key: string]: unknown;
    };
} & ({
    streamId: string;
} | {
    playbackId: string;
});
/**
 * Signs a JSON Web Token which can be used to view access-restricted media. If you have not instantiated a client yet,
 * will throw a "No livepeer client found." error if no `config` is passed.
 *
 * Throws if there is an error fetching a stream by ID.
 */
export declare const signAccessJwt: <TLivepeerProvider extends LivepeerProvider = LivepeerProvider>(options: SignAccessJwtOptions, config?: ClientConfig<TLivepeerProvider> | undefined) => Promise<string>;
