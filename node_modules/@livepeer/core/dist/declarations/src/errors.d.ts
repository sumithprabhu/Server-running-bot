/**
 * Error subclass for http errors.
 */
export declare class HttpError<T = undefined> extends Error {
    readonly code: number;
    readonly data?: T;
    readonly internal?: unknown;
    constructor(
    /** Number error code */
    code: number, 
    /** Human-readable string */
    message: string, 
    /** Low-level error */
    internal?: unknown, 
    /** Other useful information about error */
    data?: T);
}
export declare const STREAM_OPEN_ERROR_MESSAGE = "stream open failed";
export declare const STREAM_OFFLINE_ERROR_MESSAGE = "stream is offline";
export declare const STREAM_WAITING_FOR_DATA_ERROR_MESSAGE = "stream is waiting for data";
export declare const ACCESS_CONTROL_ERROR_MESSAGE = "shutting down since this session is not allowed to view this stream";
export declare const BFRAMES_ERROR_MESSAGE = "metadata indicates that webrtc playback contains bframes";
export declare const NOT_ACCEPTABLE_ERROR_MESSAGE = "response indicates unacceptable playback protocol";
export declare const isStreamOfflineError: (error: Error) => boolean;
export declare const isAccessControlError: (error: Error) => boolean;
export declare const isBframesError: (error: Error) => boolean;
export declare const isNotAcceptableError: (error: Error) => boolean;
