export declare const BondingManagerABI: readonly [{
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosNext";
        readonly type: "address";
    }];
    readonly name: "rebondFromUnbondedWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_oldDelegateNewPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_oldDelegateNewPosNext";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newDelegateNewPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newDelegateNewPosNext";
        readonly type: "address";
    }];
    readonly name: "transferBond";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }];
    readonly name: "isActiveTranscoder";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }];
    readonly name: "isValidUnbondingLock";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }];
    readonly name: "delegatorStatus";
    readonly outputs: readonly [{
        readonly internalType: "enum BondingManager.DelegatorStatus";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [];
    readonly name: "reward";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_finder";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_slashAmount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_finderFee";
        readonly type: "uint256";
    }];
    readonly name: "slashTranscoder";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }];
    readonly name: "getNextTranscoderInPool";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_round";
        readonly type: "uint256";
    }];
    readonly name: "getTranscoderEarningsPoolForRound";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "totalStake";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "transcoderRewardCut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "transcoderFeeShare";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "cumulativeRewardFactor";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "cumulativeFeeFactor";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_endRound";
        readonly type: "uint256";
    }];
    readonly name: "claimEarnings";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }];
    readonly name: "withdrawStake";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }];
    readonly name: "unbond";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "getTranscoderPoolSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_rewardCut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_feeShare";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosNext";
        readonly type: "address";
    }];
    readonly name: "transcoderWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }];
    readonly name: "rebondFromUnbonded";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_fees";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_round";
        readonly type: "uint256";
    }];
    readonly name: "updateTranscoderWithFees";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }];
    readonly name: "getDelegatorUnbondingLock";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "withdrawRound";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "currentRoundTotalActiveStake";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_rewardCut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_feeShare";
        readonly type: "uint256";
    }];
    readonly name: "transcoder";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "nextRoundTotalActiveStake";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "targetContractId";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "getTranscoderPoolMaxSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "getTotalBonded";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }];
    readonly name: "getTranscoder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "lastRewardRound";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "rewardCut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "feeShare";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "lastActiveStakeUpdateRound";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "activationRound";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "deactivationRound";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "activeCumulativeRewards";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "cumulativeRewards";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "cumulativeFees";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "lastFeeRound";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_numActiveTranscoders";
        readonly type: "uint256";
    }];
    readonly name: "setNumActiveTranscoders";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }];
    readonly name: "isRegisteredTranscoder";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_oldDelegateNewPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_oldDelegateNewPosNext";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_currDelegateNewPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_currDelegateNewPosNext";
        readonly type: "address";
    }];
    readonly name: "bondWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "unbondingPeriod";
    readonly outputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "";
        readonly type: "uint64";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [];
    readonly name: "setCurrentRoundTotalActiveStake";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosNext";
        readonly type: "address";
    }];
    readonly name: "rebondWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_newPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosNext";
        readonly type: "address";
    }];
    readonly name: "rewardWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "getFirstTranscoderInPool";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }];
    readonly name: "transcoderStatus";
    readonly outputs: readonly [{
        readonly internalType: "enum BondingManager.TranscoderStatus";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_controller";
        readonly type: "address";
    }];
    readonly name: "setController";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_newPosNext";
        readonly type: "address";
    }];
    readonly name: "unbondWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_endRound";
        readonly type: "uint256";
    }];
    readonly name: "pendingStake";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transcoder";
        readonly type: "address";
    }];
    readonly name: "transcoderTotalStake";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }];
    readonly name: "getDelegator";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "bondedAmount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "fees";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "delegateAddress";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "delegatedAmount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "startRound";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "lastClaimRound";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "nextUnbondingLockId";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "address payable";
        readonly name: "_recipient";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }];
    readonly name: "withdrawFees";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }];
    readonly name: "bond";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_unbondingLockId";
        readonly type: "uint256";
    }];
    readonly name: "rebond";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_oldDelegateNewPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_oldDelegateNewPosNext";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_currDelegateNewPosPrev";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_currDelegateNewPosNext";
        readonly type: "address";
    }];
    readonly name: "bondForWithHint";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "_unbondingPeriod";
        readonly type: "uint64";
    }];
    readonly name: "setUnbondingPeriod";
    readonly outputs: readonly [];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_delegator";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_endRound";
        readonly type: "uint256";
    }];
    readonly name: "pendingFees";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "controller";
    readonly outputs: readonly [{
        readonly internalType: "contract IController";
        readonly name: "";
        readonly type: "address";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_controller";
        readonly type: "address";
    }];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "transcoder";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "rewardCut";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "feeShare";
        readonly type: "uint256";
    }];
    readonly name: "TranscoderUpdate";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "transcoder";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "activationRound";
        readonly type: "uint256";
    }];
    readonly name: "TranscoderActivated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "transcoder";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "deactivationRound";
        readonly type: "uint256";
    }];
    readonly name: "TranscoderDeactivated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "transcoder";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "finder";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "penalty";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "finderReward";
        readonly type: "uint256";
    }];
    readonly name: "TranscoderSlashed";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "transcoder";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "Reward";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newDelegate";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "oldDelegate";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "additionalAmount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "bondedAmount";
        readonly type: "uint256";
    }];
    readonly name: "Bond";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegate";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "unbondingLockId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "withdrawRound";
        readonly type: "uint256";
    }];
    readonly name: "Unbond";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegate";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "unbondingLockId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "Rebond";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "oldDelegator";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newDelegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "oldUnbondingLockId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "newUnbondingLockId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "TransferBond";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "unbondingLockId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "withdrawRound";
        readonly type: "uint256";
    }];
    readonly name: "WithdrawStake";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "WithdrawFees";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegate";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "delegator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "rewards";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "fees";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "startRound";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "endRound";
        readonly type: "uint256";
    }];
    readonly name: "EarningsClaimed";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "controller";
        readonly type: "address";
    }];
    readonly name: "SetController";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "string";
        readonly name: "param";
        readonly type: "string";
    }];
    readonly name: "ParameterUpdate";
    readonly type: "event";
}];
