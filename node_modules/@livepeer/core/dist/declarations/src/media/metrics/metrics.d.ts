import { MediaControllerStore } from '../controller';
import { MimeType } from '../mime';
type RawMetrics = {
    preloadTime: number;
    ttff: number;
    firstPlayback: number;
    nWaiting: number;
    timeWaiting: number;
    nStalled: number;
    timeStalled: number;
    timeUnpaused: number;
    nError: number;
    lastError?: string;
    videoHeight: number | null;
    videoWidth: number | null;
    playerHeight: number | null;
    playerWidth: number | null;
    playbackScore: number | null;
    player: `${'audio' | 'hls' | 'video' | 'webrtc' | 'unknown'}-${string}`;
    sourceType: MimeType | 'unknown';
    offset: number;
    pageUrl: string;
    sourceUrl: string | null;
    duration: number | null;
    autoplay: 'autoplay' | 'preload-full' | 'preload-metadata' | 'standard';
    userAgent: string;
    uid: string;
};
type PlaybackRecord = {
    clockTime: number;
    mediaTime: number;
    score: number;
};
export declare class PlaybackMonitor<TElement, TMediaStream> {
    active: boolean;
    values: PlaybackRecord[];
    score: number | null;
    averagingSteps: number;
    store: MediaControllerStore<TElement, TMediaStream>;
    constructor(store: MediaControllerStore<TElement, TMediaStream>);
    init(): void;
    reset(): void;
    destroy(): void;
    calculateScore(): number | null;
    valueToScore(a: PlaybackRecord, b?: PlaybackRecord): number;
}
declare class Timer {
    totalTime: number;
    countStarts: number;
    startTime: number;
    start(): void;
    stop(): void;
    getTotalTime(): number;
    getCountStarts(): number;
}
export declare class MetricsStatus<TElement, TMediaStream> {
    requestedPlayTime: number;
    firstFrameTime: number;
    retryCount: number;
    connected: boolean;
    store: MediaControllerStore<TElement, TMediaStream>;
    destroy: () => void;
    currentMetrics: RawMetrics;
    previousMetrics: RawMetrics | null;
    timeWaiting: Timer;
    timeStalled: Timer;
    timeUnpaused: Timer;
    constructor(store: MediaControllerStore<TElement, TMediaStream>);
    addError(error: string): void;
    getFirstPlayback(): number;
    setFirstPlayback(): void;
    getFirstFrameTime(): number;
    setFirstFrameTime(): void;
    setPlaybackScore(playbackScore: number): void;
    setConnected(isConnected: boolean): void;
    getMetrics(): {
        current: RawMetrics;
        previous: RawMetrics | null;
    };
}
export type MediaMetrics<TElement, TMediaStream> = {
    metrics: MetricsStatus<TElement, TMediaStream> | null;
    destroy: () => void;
};
/**
 * Gather playback metrics from a media store and
 * report them to a websocket. Automatically handles a redirect to get the
 * metrics endpoint.
 *
 * @param store Element to capture playback metrics from
 * @param onError Error callback
 */
export declare function addMediaMetricsToStore<TElement, TMediaStream>(store: MediaControllerStore<TElement, TMediaStream> | undefined | null, onError?: (error: unknown) => void): MediaMetrics<TElement, TMediaStream>;
export {};
