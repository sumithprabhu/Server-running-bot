import { Asset, CreateAssetArgs, CreateAssetSourceType, CreateClipArgs, CreateStreamArgs, GetAssetArgs, GetAssetMetricsArgs, GetPlaybackInfoArgs, GetStreamArgs, GetStreamSessionArgs, GetStreamSessionsArgs, LivepeerProvider, LivepeerProviderConfig, Metrics, MirrorSizeArray, PlaybackInfo, Stream, StreamSession, UpdateAssetArgs, UpdateStreamArgs } from '../types';
export type FetchOptions<P = object> = RequestInit & {
    json?: P;
};
export declare abstract class BaseLivepeerProvider implements LivepeerProvider {
    /** Provider base config */
    readonly _config: LivepeerProviderConfig;
    constructor(config: LivepeerProviderConfig);
    getConfig(): LivepeerProviderConfig;
    _get<T>(url: `/${string}`, options?: FetchOptions<never>): Promise<T>;
    _create<T, P>(url: `/${string}`, options?: FetchOptions<P>): Promise<T>;
    _update<P>(url: `/${string}`, options?: FetchOptions<P>): Promise<void>;
    abstract createStream(args: CreateStreamArgs): Promise<Stream>;
    abstract updateStream(args: UpdateStreamArgs): Promise<Stream>;
    abstract getStream(args: GetStreamArgs): Promise<Stream>;
    abstract getStreamSession(args: GetStreamSessionArgs): Promise<StreamSession>;
    abstract getStreamSessions(args: GetStreamSessionsArgs): Promise<StreamSession[]>;
    abstract createAsset<TSource extends CreateAssetSourceType>(args: CreateAssetArgs<TSource>): Promise<MirrorSizeArray<TSource, Asset>>;
    abstract getAsset(args: GetAssetArgs): Promise<Asset>;
    abstract updateAsset(args: UpdateAssetArgs): Promise<Asset>;
    abstract getPlaybackInfo(args: GetPlaybackInfoArgs): Promise<PlaybackInfo>;
    abstract getAssetMetrics(args: GetAssetMetricsArgs): Promise<Metrics>;
    abstract createClip(args: CreateClipArgs): Promise<Asset>;
}
export type LivepeerProviderFn<TProvider extends LivepeerProvider = BaseLivepeerProvider> = () => TProvider;
