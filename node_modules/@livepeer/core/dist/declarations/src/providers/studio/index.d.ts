import type { StudioPlaybackInfo, StudioStream, StudioViewsMetrics } from './types';
import type { Asset, CreateAssetArgs, CreateAssetSourceType, CreateClipArgs, CreateStreamArgs, GetAssetArgs, GetAssetMetricsArgs, GetPlaybackInfoArgs, GetStreamArgs, GetStreamSessionArgs, GetStreamSessionsArgs, LivepeerProviderConfig, Metrics, MirrorSizeArray, PlaybackInfo, PlaybackPolicy, Stream, StreamSession, UpdateAssetArgs, UpdateStreamArgs, ViewsMetrics } from '../../types';
import { BaseLivepeerProvider, LivepeerProviderFn } from '../base';
export type StudioLivepeerProviderConfig = LivepeerProviderConfig & {
    apiKey: string;
};
export declare class StudioLivepeerProvider extends BaseLivepeerProvider {
    readonly _defaultHeaders: {
        Authorization?: `Bearer ${string}`;
        Origin?: string;
    };
    constructor(config: StudioLivepeerProviderConfig & Record<string, string>);
    createStream(args: CreateStreamArgs): Promise<Stream>;
    updateStream(args: UpdateStreamArgs): Promise<Stream>;
    getStream(args: GetStreamArgs): Promise<Stream>;
    getStreamSession(args: GetStreamSessionArgs): Promise<StreamSession>;
    getStreamSessions(args: GetStreamSessionsArgs): Promise<StreamSession[]>;
    createClip(args: CreateClipArgs): Promise<Asset>;
    createAsset<TSource extends CreateAssetSourceType>(args: CreateAssetArgs<TSource>): Promise<MirrorSizeArray<TSource, Asset>>;
    getAsset(args: GetAssetArgs): Promise<Asset>;
    updateAsset(args: UpdateAssetArgs): Promise<Asset>;
    _getRtmpIngestUrl(streamKey: string): string;
    getPlaybackInfo(args: GetPlaybackInfoArgs): Promise<PlaybackInfo>;
    _getPlaybackUrl(playbackId: string): string;
    getAssetMetrics(args: GetAssetMetricsArgs): Promise<Metrics>;
    _mapToStream(studioStream: StudioStream): Promise<Stream>;
    private _mapToMultistream;
    _mapToPlaybackInfo(studioPlaybackInfo: StudioPlaybackInfo): PlaybackInfo;
    _mapToViewsMetrics(studioMetrics: StudioViewsMetrics): ViewsMetrics;
    _getPlaybackPolicyMapped(policy: PlaybackPolicy | undefined): PlaybackPolicy | null;
}
export declare function studioProvider(config: Partial<Omit<StudioLivepeerProviderConfig, 'apiKey'>> & Pick<StudioLivepeerProviderConfig, 'apiKey'>): LivepeerProviderFn<StudioLivepeerProvider>;
