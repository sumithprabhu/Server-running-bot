interface IObject {
    [key: string]: any;
}
type TUnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
export interface DeepMergeOptions {
    mergeArrays: boolean;
}
export declare const deepMerge: {
    <T extends IObject[]>(...objects: T): TUnionToIntersection<T[number]>;
    options: DeepMergeOptions;
    withOptions<T_1 extends IObject[]>(options: Partial<DeepMergeOptions>, ...objects: T_1): TUnionToIntersection<T_1[number]>;
};
export {};
